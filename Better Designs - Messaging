 -0 What is Messaging
--------------------------
  > producers
  > broker
  > consumers
  > can be without a broker - ref ZeroMQ

 -0 ZeroMQ Compared With
--------------------------
  > SCTP + JGroups = make arbitrary networks using 'brokerless' peers
  > SCTP - Messaginig
  > JGroups - pub sub
 
 -0 Why SCTP - Stream Control Transmission Protocol
--------------
  -0 Limitations of TCP
-------------------------
  > strict order of transmission delivery of data
  > head-of-line blocking offered by TCP causes unnecessary delay
  > Applications must add their own record marking to delineate their messages, 
  >> and must make explicit use of the push facility to ensure that a complete message is transferred.
  > The limited scope of TCP sockets complicates the task of providing highly-available data transfer 
  >> capability using multi-homed hosts.
  > TCP is relatively vulnerable to denial-of-service attacks, such as SYN attacks.

  -0 Features woth SCTP
--------------------------
  > multi-homing support on both ends
  >> multi-homing = consist of more than one IP address
  >> enabling transparent failover between redundant network paths
  > multi stream - delivery of chunks with independent streams
  > validation & acknowledgement mechanisms protect against flooding attacks
  > provide notification of duplicated or missing data chunks
  > simpler packet structure than TCP
  > Security - 4 way handshake to protect against SYN flooding
  >> protect against large cookies for association verification & authenticity
  > Not supported directly in Windows





 -0 Kafka
------------------------
  > high throughpur
  > persistent
  > pub-sub
  > messaging

 -0 Kafka - Recipes
--------------------------
  > tracking
  > requests per second


 -0 Recipe - kafaesque
-------------------------
  > multiple workers (push)
  > single Q
  > multiple fetchers (pull)

 -0 RabbitMQ
------------------
  > implements AQMP
  > implements broker architecture
  > advanced scenarios like routing, load balancing, or persistent message queuing
  > less scalable & slower because the central node adds latency & messages envelopes are quite big
  > an Enterprise Message Queue ..
  >> persistence
  >> support for transactions
  > focusses on how messages r stored, filtered & monitored & failover


 -0 ZeroMQ
---------------
  > lightweight message oriented socket implementation
  > high throughput low latency
  > mostly DIY
  > acts as concurrency framework
  > faster than TCP, for clustered products
  > carries messages across inproc, IPC, TCP, & multicast
  >> i.e. suitable for in process asynchronous programming
  >> mostly a message oriented IPC library
  > Connect N-to-N via fanout, pubsub, pipeline, request reply
  > Async IO for scalable multicore message passing apps
  > focusses on how messages r transferred over the wire
  > 




 -0 ActiveMQ
-----------------
  > can be with broker or P2P topology
  > like RabbitMQ, easier to implement advanced scenarios but @ the cost of raw performance
















