 - volatile -> prevent compiler or JVM optimization in terms of caching or reordering.

 - compiler doesnot reorganize reads or writes on volatile variables

 - Concurrent Class
 - rely on JMM
 - Specifically, this is the revised Java memory model from Java 5, 
 - - where the happen-before relationships between reads and writes of volatile variables, was specified accurately.
 - The ConcurrentXXX classes in the java.util.concurrent package, 
 - - relies heavily on this promised behavior of volatile reads to ensure race-free behavior.

 - JMM
-----------
 - Under the Java memory model, 
 - - a write to a volatile variable is guaranteed to happen before a read, if that is the program order;
 - i.e. , the volatile read will always retrieve the most accurate version of data in the variable.
 - The concurrent classes utilize this to ensure that the data structures 
 - - can be updated by a single thread, 
 - - WHILE being read by multiple other threads (in any other scenario, there would be race conditions).
 - - I.E. read & write concurrently


 - Without Volatile
--------------------------
 - Java cannot guarantee which writes get seen by other threads
 - or even the order in which they get seen

 - Double Checked Locking
----------------------------
 class Foo {
  private volatile Helper helper = null;
  public Helper getHelper() {
    if (helper == null) { // avoid synchronization if it can be
      synchronized(this) {
        if (helper == null) {
          helper = new Helper();
        }
      }
    }
  return helper;
}

 - Above solves 2 things
 - avoid synchronization if it can be
 - but need synchronization
 - make other threads able to view the null or not-null object

 - Volatile vs Static Global
---------------------------------
 - If volatile is just for communicating the value of global variable for other threads 
 - why can't I use a static global varible.
 - Any updates made to static variable will be reflected in other threads if they hold different instances even.
 - NOPES
 - Other threads may or may not see updates to static variables. 
 - Communicating updates between threads requires synchronization
 - (in the case of this post, "synchronization" takes the form of reads of and writes to volatile fields).
 - If you don't use synchronization, then there is no guarantee that other threads will see the writes you perform.


 - Volatile Integer & ++
-----------------------------
 - 3 separate ops
 - read vola to a local variable
 - incremenet the local variable
 - write local back to the volatile
 - LOCAL comes into picture
 - there is no synchronization in this
 
 - If you want atomic increment or atomic decrement, need to use
 - java.util.concurrent.atomic classes

 Visibility Example
--------------------------
class LoopMayNeverEnd { 
  boolean done = false; 

  void work() { 
    while (!done) { 
      // do work 
    } 
  } 
 
  void stopWork() { 
    done = true; 
  } 
} 

 - In practice, this may happen if the compiler detects that no writes are performed to done in the first thread; 
 - the compiler may decide that the program only has to read done once, transforming it into an infinite loop.
 
 - use a mechanism that provides synchronization between the two threads. 
 - In LoopMayNeverEnd, if you want to do this, you can declare done to be volatile. 
 - Conceptually, all actions on volatiles happen in a single order, 
 - where each read sees the last write in that order. 
 - In other words, the compiler can't prevent a read of a volatile from seeing a write performed by another thread.


References:
-------------
1. http://stackoverflow.com/questions/6668597/fence-instruction-insertion-by-jvm-jit
2. http://jeremymanson.blogspot.in/2008/11/what-volatile-means-in-java.html
