 - Lua JIT FFI
 -----------------
 - The FFI library largely obviates the need to write tedious manual Lua/C bindings in C.
 - Calls to C functions can be inlined in JIT-compiled code, 
 - - unlike calls to functions bound via the classic Lua/C API. 
 
 Lua JIT FFI - How
 ------------------
 - Just load the ffi library in lua code
 - define the C method
 - execute the C method as if it were a Lua method
 
 
 Lua JIT FFI - C DataStructures
 ---------------------------------
 - Lua is built upon high-level data types. 
 - They are flexible, extensible and dynamic. That's why we all love Lua so much. 
 - Alas, this can be inefficient for certain tasks, where you'd really want a low-level data type. 
 - E.g. a large array of a fixed structure needs to be implemented 
 - - with a big table holding lots of tiny tables. 
 - This imposes both a substantial memory overhead as well as a performance overhead. 
 
 -> So just declare the C DataStructurein Lua using FFI.
 -> This C DataStructure will have the minimal type e.g. uint8_t
 
 Lua JIT - Coolness
 ---------------------
 - Stop learning C / CPP syntaxes
 - Stop worrying memory leaks
 - Look @ the C header files or the documentation provided by each C library or C compiler.
 - That's it.
 
 FFI - Inside Details
 --------------------
 - The FFI library provides the ffi.C default C library namespace, 
 - which allows calling functions from the default set of libraries, like a C compiler would. 
 - Also, the FFI library automatically detects stdcall functions, so you don't need to declare them as such. 
 
 
 Passing to arguments
 --------------------
 - Pass nil to pass a NULL pointer
 - Pass numbers to number arguments
 - pass pointers to pointer arguments
 
 
 ffi.load + POSIX
 ----------------
 - lib may be prepended
 - .so may be suffixed
 - however above will happen if name doesnot have a dot notation
 - so ffi.load("z") looks for libz.so
 
 # NOTE - WHERE WILL IT SEARCH FOR LIB ?
 --------------------------------------
 - In the default shared library path
 
 
 ffi.load + WINDOWS
 ------------------
 - if no dot in name then
 - .dll is appended
 - ffi.load("ws2_32") looks for ws2_32.dll
 
 Note - WHERE ?
 -----------------
 - in the default DLL search area
 
 
 ffi.C
 -----------------
 - note the capital C
 - default C library NAMESPACE
 - It BINDS to the default set of symbols
 - It BINDS to the default set of libraries
   - >   in the TARGET system 
 
 ffi.C & POSIX
 ---------------
 - binds to symbols in the default or global NAMESPACE
 - This includes at least 
  > libc, 
  > libm, 
  > libdl (on Linux), 
  > libgcc (if compiled with GCC),
  > as well as any exported symbols from the Lua/C API provided by LuaJIT itself.
  
 ffi.C & WINDOWS
 -------------------
 - binds to symbols exported from the 
  > *.exe
  > lua51.dll 
  > LuaJIT linked to 
   - > (msvcrt*.dll), kernel32.dll, user32.dll and gdi32.dll
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
