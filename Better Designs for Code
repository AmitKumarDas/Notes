-0- Hypermedia APIs vs old styled APIs
  + common design pattern for APIs
  > RPC style design pattern
  > accept parameter & return objects

+ Hypermedia style APIs
  > interactions will be based on links & forms

-0- Hypermedia API vs RPC API
  > Hypermedia - use of a shared message model
  > Hypermedia - usually use a registered media type -

-0- Registered Media Type
  >> HTML, Atom, HAL, Collection-JSON
  >> this message model will be used regardless of the object or collection being passed

-0- Marshalling Objects vs. Representing State
  + H Apis - focussed on representing state of the app
  >> Not focussed on functions that affect the state

-0- Marshall Objects
  + Representing state of app as an object
  >> seems good for local source code 
  >> not great for WWW
  >> most cases the shared message represent the shared understanding between apps

-0- More than just DATA H-API
  + data plus control
  + control that represents the next steps


 -0- Annotation Usage
---------------------
  > A Command JavaBean
  > This bean uses annotation with all its properties
  > This annotation has details like: type, default, required, description


 -0 Commands & Events
-----------------------
  > Commands are persisted as Events  
  > Command may be async
  > Persistence logic inside Command class
  > Command execution -> store response as as property in this Command class itself
  > Represents a Job type - async/syv - further ENUM type within sync or async

 -0 Callbacks & Template & Utils
-----------------------------------
  > Define callbacks
  > Define templates
  > Define callback util
  > Define template util
  > Use Generics, filter, predicate, transform, classify patterns
  > callbacks should return a state of ENUM type





 -0- Architecture Style @ cloudstack
----------------------------
  > Some Wrapper Engine >> Specific Engine
  > Specific Engine -- Will have a lifecycle 
  > Specific Engine > Host of Specific Services
  > Specific Service > Some Provider Manager > Provider > Provider Driver

 -0- Storage Lifecycle @ cloudstack
--------------------------------------
  > Register -> Initialized -> Ready --UnManaged-> Maintenance
  > Maintenance -> Detached -> Removed
  > Detached -attach-> Ready
  > Maintenance --managed-> Ready


 -0 Cloudstack - Command API 
-------------------------
  > Every operation or UseCase is a command
  > Command is interpreted as an Entity 
  > command is described via annotations
  > each command property is described via annotation
  > command has a response property
  > command talks to service to one of the CRUD ops on datastore
  > A command corresponds to either C, R, U, or D.
  > seems bit DDD - Domain Driven Design - coz each Command's property has some metadata set into it

 -0 Command 
------------------------
  > Packaged as Admin & User


 -0 Command & Response = API
--------------------------
  > Response represents the reverse flow of Command
  > Response is pure java bean with annotations

 -0 GSon + SerializedName
-------------------------------
  > good way to represent the serialized information
  > even if code uses the same property with different name
  > annotate with gson's SerializedName to serialize into a different name
  > use constants with @SerializedName annotation
  > or better use Spring Expression Language with these annotations
  > Spring EL brings in the advantage of declarative configuration
  > Declarative configuration can be used to treat various naming conventions per deployment/vendor/driver

 -0 Injection vs Others
----------------------------
  > javax.inject package
  > better than constructors, factories, service locators (i.e. JNDI)
  > Better UNIT Testing
  > Factories - lot of unnecessary boilerplate code, adding noise, complexity & error-pronesess


 -0 API ==
----------------------
  > Command + Response 
  > + Annotation definition + Enum + Exception + BaseCommands
  > + Abstract Classes + Interfaces
  > 

-0 Cache - An Sample Design
---------------------
  > Public Cache class
  > nested private CacheItem<T> class
  > CacheItem = value & createTime
  > Methods - removeOldest, 
  > HashMap of <String,CacheItem<XXX>>
  > ref - https://github.com/bitwave/jlambda/blob/develop/src/jlambda/codegen/Cache.java


 -0 Interface Design - I
-------------------------
  > Mostly in the BASE package
  > extending other ineterfaces
  > sometime a list of interfaces
  > different ENUMs are defined here
  > enum TYPE, enum State, enum Event
  > Entity type interfaces will have lots of public methods
  > Need not reuse ENUM over interfaces   > Have ENUM defined in each interface separately
  > Need not reuse EVENT over interfaces  > Have EVENT defined in each interface separately

 -0 Interface Example - Storage - @ref Cloudstack
-------------------------------------------------
  > Storgae >>
  > enum ImageFormat, 
  > enum FileSystem, 
  > enum TemplateType, 
  > enum StoragePoolType, 
  > enum StorageResourceType

 -0 Interface Example Design - II
------------------------------------
  > Above talked of Interfaces representing Entitys
  > There will be Interafecs representing Managers
  > These manager type Interfaces will extend some other Interface
  > These Interface is not direclty related to Services
  > Service will be yet another type of Interface

 -0 Interface Example Design - III
-----------------------------------
  > Service Type Interfaces
  > The interface here may not extend other Interfaces
  > The interface methods may have below arguments
  >> Long xxxID, XXXCommand
  > Will return some Entity type Interface

 -0 Interface Example Design - IV
---------------------------------------
  > Behavior type Interface
  > These interface will have very minimal public methods


 -0 Enum Design - I
-----------------------
  > May be defined within a Entity type Interafce

 -0 Enum Design - II
------------------------------
  > ENUM may have A STATE MACHINE representation.
  > The State Machine may use the properties of its own ENUM & 
  >> also map it with properties of other ENUM 
  > both the ENUMs will be present in the Entity type Interface

 -0 State Machine - I
---------------------------
  > Defines transition
  > Mostly defines transition from one ENUM state to another ENUM state
  > Uses the EVENT enum property as an validatory property for above transition to be successful

 -0 State Machine - II
------------------------------
  > Event is normally processed in a State Machine
  > The event is consumed in the State Machine based on some strategy
  > State Machine process events that might fire transitions between states

 -0 State Machine vis-a-vis THREADs- III
---------------------------------------------
  > Designed to protect ciritical sections in a complex event driven environment
  > Only 1 THREAD can execute a transition @ a time
  > Any manipulation of sensitive info should be done via a transition
  > During Transition the lock of the object is acquired
  > The locks are not released till transition is Complete
  > This may cause deadlocks, so be a good programmer

 -0 StateMachine, Transition & Thread Lock - IV
--------------------------------------------------
  > Locks guarantee no other thread will be in that critical section
  > What about the same THREAD
  > It might be possible to process an EVENT while processing another EVENT
  > We might avoid that due to inconsistencies
  > define a flag allowsReentrantTransition to false



 -0 StateMachine, Transition - V
-----------------------------------
  > Transition - steps >> pre, do & post
  > All these 3 steps in sequence
  > Can be handled by a behavior controller
  > Step 1 : Exit Phase; Step 2 : Transition Phase; Step 3 : Enter State
















References
1/ http://www.infoq.com/articles/hypermedia-api-tutorial-part-one
