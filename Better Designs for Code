-0- Hypermedia APIs vs old styled APIs
  + common design pattern for APIs
  > RPC style design pattern
  > accept parameter & return objects

+ Hypermedia style APIs
  > interactions will be based on links & forms

-0- Hypermedia API vs RPC API
  > Hypermedia - use of a shared message model
  > Hypermedia - usually use a registered media type -

-0- Registered Media Type
  >> HTML, Atom, HAL, Collection-JSON
  >> this message model will be used regardless of the object or collection being passed

-0- Marshalling Objects vs. Representing State
  + H Apis - focussed on representing state of the app
  >> Not focussed on functions that affect the state

-0- Marshall Objects
  + Representing state of app as an object
  >> seems good for local source code 
  >> not great for WWW
  >> most cases the shared message represent the shared understanding between apps

-0- More than just DATA H-API
  + data plus control
  + control that represents the next steps


 -0- Annotation Usage
---------------------
  > A Command JavaBean
  > This bean uses annotation with all its properties
  > This annotation has details like: type, default, required, description


 -0 Commands & Events
-----------------------
  > Commands are persisted as Events  
  > Command may be async
  > Persistence logic inside Command class
  > Command execution -> store response as as property in this Command class itself
  > Represents a Job type - async/syv - further ENUM type within sync or async

 -0 Callbacks & Template & Utils
-----------------------------------
  > Define callbacks
  > Define templates
  > Define callback util
  > Define template util
  > Use Generics, filter, predicate, transform, classify patterns
  > callbacks should return a state of ENUM type





 -0- Architecture Style @ cloudstack
----------------------------
  > Some Wrapper Engine >> Specific Engine
  > Specific Engine -- Will have a lifecycle 
  > Specific Engine > Host of Specific Services
  > Specific Service > Some Provider Manager > Provider > Provider Driver

 -0- Storage Lifecycle @ cloudstack
--------------------------------------
  > Register -> Initialized -> Ready --UnManaged-> Maintenance
  > Maintenance -> Detached -> Removed
  > Detached -attach-> Ready
  > Maintenance --managed-> Ready


 -0 Cloudstack - API 
-------------------------
  > Every operation or UseCase is a command
  > command is described via annotations
  > each command property is described via annotation
  > command has a response property
  > command talks to service to CRUD ops on datastore












References
1/ http://www.infoq.com/articles/hypermedia-api-tutorial-part-one
