  Its such a big topic ... need to learn this !!



Example
--------------
  2010-04-16T12:11:18.979+0200: 84.335: 
        [GC 84.336: [ParNew: 273152K->858K(341376K), 0.0030008 secs] 
                    273152K->858K(980352K), 0.0031183 secs] 
        [Times: user=0.00 sys=0.00, real=0.00 secs]


  > 84.35 ~ timestamp ~ no of seconds after JVM startup
  > 2010-04-16T12:11:18.979+0200: ~ datestamp ~ enabled via -XX:+PrintGCDateStamps


  Settings
----------------
CMS GC with -XX:+PrintGCDetails and -XX:+PrintGCTimeStamps prints a lot of information. 

  Collectors
------------
  > Concurrent Collector  - GC with app execution
  > parallel Collector - uses multiple CPUs for GC
  > Stop The World Collector - performs GC while app is stopped completely
  > Incremental Collector - performs GC as a series of small ops with longer gaps in between
  
   GC Safepoint
---------------------------
  > point where the collector can identify all the references in that thread's execution stack


   Oldgen & CMS
-------------------------
  > Mark Sweep Compact - common for OldGen

  YoungGen & CC
---------------------
  > Copying Collector - common for YoungGen

  Mark
-----------
  > all reachable objs marked live
  > all NON reachable objs marked DEAD

  Sweep
-----------
  > Scan the heap
  > Identify DEAD objects
  
  Compact
------------
  > Defragments the heap

  Compact
-----------------
  > Move LIVE objects together to reclaim CONTIGUOUS empty space
  > above is Relocate
  > obj references need to be corrected to these new locations - remap
  > Remap scan

  Copy
-----------
  > moves all lives objects
  
 OOME
-----------
  > There is little that you can do about it, except to exit the program, change the -Xmx value, and restart the JVM.
  > Is -Xmx is too large, you slow down the application
  > Out Of Memory Exception can happen in any thread
  > This thread dies

  OOME & its Stack Trace
---------------------------
  > often there is not enough memory to build the stack trace for the OOME


  Tenured Generation Pool
-----------------------------
  > objs surviving the young generation migrate to tenured
  > -Xmx - the max memory to be used in Tenured Generation

  Young Gen
---------------
  > lots & lots of garbage in it
  > normally a copy collector

  Tenured Gen
-----------------
  > longer lived objs
  > normally mark & sweep collector


  NewRatio
---------------
  > a ratio of 2 means
  > = Tenured Generation Size is 2/3 of Total heap size
  > = Young Generation Size is 1/3 of Total heap size

  Aliter of Newratio
-------------------------
  > NewSize & MaxNewSize refers to Young Gen sizes

  If Young & Tenured Gen is FULL
-----------------------------------
  > lets say young & tenured gen is over flowing with long lived data
  > So, Minor GC cannot be done successfully
  > Hence, a Major GC will be done
  > However, all the next collections will be Major GCs only
  > increasing the NewRatio might help

 Increasing NewRatio
-----------------------
  > Will increase the TenuredGen Size & decrease Young Gen
  > Lets say if its 5
  > Then TenuredGen = 5/6 & YoungGen = 1/6 ; of total Heap Space
  > Will be ok for overflowing & mostly filled Tenured Gen apps

  App with Higher Threads
--------------------------
  > Might be allocating with higher rate
  > so a large Young Gen may be appropriate
  > NewSize & MaxNewSize will give precise control over Young Gen

  Default NewRatio Values
--------------------------
  > is platform & runtime compiler (JIT) dependent

  CMS Initial Mark & Concurrent Mark
---------------------------------------
  > initial mark completes then concurrent mark starts
  > concurrent mark can be interrupted by Young Gen collections .. remember thread & concurrency
  > Initial mark is a Stop The World phase
  > CMS concurrent YIELDs to Young Gen collection


  Example
-------------
[GC [1 CMS-initial-mark: 463236K(515960K)] 464178K(522488K), 0.0018216 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]
Explained Below
[GC [1 CMS-initial-mark: oc--OG(tot-OG)]  oc-Y+OG(tot-Y+OG), dur-MarkInit] [Times: user=0.01 sys=0.00, real=0.00 secs]

  > oc - occupied
  > tot - total
  > dur - duration
  > Initial mark is a STW

  Example
-------------
[GC[ParNew: 6528K->702K(6528K), 0.0130227 secs] 469764K->465500K(522488K), 0.0130578 secs] [Times: user=0.05 sys=0.00, real=0.01 secs]
[GC[ParNew: oc-YG->oc-YG(tot-YG), pause duration] oc-Y&OG->oc-Y&OG(tot-HS), dur-ParNew] [Times: user=0.05 sys=0.00, real=0.01 secs]

  > ratio - usr/real = 0.05/0.01 = spped up u r getting from ParNew collection
  > sys time - system activity indicator - that is slowing down the collection
  > If paging is happening - sys will be high
  > HS - Heap Space





  Memory Pool
---------------------
  > tenured generation pool - a good one to monitor

  Memory usage Notification
--------------------------------
  > When it crosses the limit
  > do a Thread.getAllStackTraces()
  > coz you wont be able to do above operation after a OOME

  Live Set
------------
  > Amt of Live Set - propotional to - Copy Collector
  > Amt of Live Set - proportional to - Mark/Compact Collector
  > Increase Empty Memory - Mark/Compact or Copy Collector efficieny increases
  
  Empty Memory
-----------------
  > controls the frequency of pauses
  > doesnot control the pause times
  > iff the collector performs STW operation
  > In Mark/Sweep/Compact collectors dat pause for sweeping, more empty memory means
  > > less frquent pause
  > > but Larger pause times

  Often Thought Tuning Approach
---------------------------------
  > get empty space
  
  Tuning Approach - 2
--------------------------
  > Kyun ki (Becoz) most ojects die young
  > So collect young objects only, as much as possible
  > & then HOPE for STW
  
  Tuning Approach - 3
------------------------
  > Most dead space can be reclaimed without moving it
  > CMS track dead space in lists & reuse it in place
  > But eventually space gets fragmented & needs to be moved.

  jHiccup
---------------
  > tool 4 capturing & displaying platform hiccups


 OOM Error
 ---------------
 - too much data
 - data representation is fat
 - a genuine memory leak
 
 FUll GC
 -------------
 - run with -verbosegc
 - Observe numbers in “Full GC” messages
[Full GC $before->$after($total), $time secs]

 Delay Full GC
 ----------------
 - Give JVM more memory
 - do u need all that data in memory
  > can u have LRU cache
  > can u have soft references
  
 Thread Locals
--------------
 - they r problematic in thread pools 
 - 200 Threads using 50 connections
 --> end up with 10 000 connection buffers
 - consider using synchronized objects or
 - just create new objects all the time
 
 HotSpot :: Eden -> Survivor -> Old
 -----------------------------------
 - new alloc in eden
 - when eden fills, STW copy-collection into survivor
 - dead objects cost zero to collect
 - after several collections, survivors get tenured into old gen
 
 Hotspot :: Ideal Young Gen
 ----------------------------
 - big enough to hold mroe than a set of concurrent req-res cycle objects
 - each survivor space = big enough to hold active request objects + tenuring ones
 - tenuring threshold s.t. long-lived objects tenure fast
 
 Hotspot :: Olg Gen Collectors
 ------------------------------
 - Throughput Collectors
  - UseSerialGC
  - UseParallelGC
  - UseParallelOldGC
 
 - Low Pause Collector
  - UseConcMarkSweepGC
  - UseG1GC
  

 Hotspot - Throughput Olg Gen Collector
 ----------------------------------------
 - auto tuning feature
 - UseAdaptiveSizePolicy
 - MaxGCPauseMillis
 - GCTimeRatio
 
 Hotspot - Choosing a collector
 --------------------------------
 - Bulk service: throughput collector, no adaptive sizing policy.
 - Everything else: try throughput collector with adaptive sizing policy. 
 - If it didn’t work, use concurrent mark-and-sweep (CMS).
 
 Hotspot - Tuning - Start with - YoungGen
 ------------------------------
 - tuning young gen
 - have a look first via below options
 - PrintGCDetails
 - PrintHeapAtGC
 
 
 Hotspot - Tenuring Distribution
 -------------------------------
 - PrintTenuringDistribution
 - Need to determine the desired survivor size **
 - Need to tune the Tenuring threshold to tenure long lived objects faster **
- look for below
  - No of ages
  - Size distribution in ages
  - should be declining
  - example
 
 Desired survivor size 262144000 bytes, new threshold 4 (max 4)
- age   1:  137474336 bytes,  137474336 total
- age   2:   37725496 bytes,  175199832 total
- age   3:   23551752 bytes,  198751584 total
- age   4:   14772272 bytes,  213523856 total
 
 
 Tuning CMS
 -------------
 - Give the app as much memory as possible
 - try using CMS without tuning
 - use verbosegc & PrintGCDetails
 - If you dont get Full GC messages then you are DONE
 - Else tune the young gen first
 
 
 Tuning CMS / Old Gen
 ---------------------
 - keep fragmentation low
 - avoid full GC stops
 - find the MIN & MAX i.e. Full GC numbers under a particular load
 - overprovision the numbers by 25-33%
  - this enables the CMS to concurrently clean memory as it's used
 - look at InitiatingOccupancyFraction - equal to overprovisioned heap ratio
 
 Further tuning Old Gen
 ----------------------
 - If still not responsive
 - i.e. lower transaction success under heavy load
 
 Reason -
 - IF Too many live objects during young gen GC
  - reduce NewSize, 
  - reduce SurvivorSpace
  - reduce Tenuring Threshold
 
 - IF too many threads
  - find minimal concurrency level
  - split the service into several JVMs
  
  Responsiveness still not GOOD
  -----------------------------
  - Look at CMS abortable preclean phase
  
  
 CMS fragmentation & Slab Allocators
 ------------------------------------
 - CMS doesnot compact, so it's prone to fragmentation
 - This will lead to longer STW
 - Apache Cassandra uses a slab allocator internally
 - 2 MB slab sizes
 - copy byte[] into them using compare-and-set
 - however, slab allocator have a limited usage & have constraints

 
 Soft References & GC
 -------------------------
 - by definition throughput collector always clears them
 - Soft Reference clearing is based on the amount of free memory available 
 - - when GC encounters the reference
 - need 2 GC cycles to get rid of referenced objects
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  





  









References
1/ http://www.infoq.com/presentations/JVM-Mechanics
2/ http://www.infoq.com/presentations/JVM-Performance-Tuning-twitter?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_articles_clk



