 To Read
---------
 > Clustering JVM using AOP - get the pdf from internet
 > Oz, Ozma & Scala
 > http://www.info.ucl.ac.be/~pvr/MemoireSebastienDoeraene.pdf


 Scalable Development
-----------------------
 > communicaiton thru code/data/schema
 > partition the problems
 > RPC as a means of sanity

 Efficient Python
-------------------------
 > avoid ORMs
 > use OOP with restraint
 
 Efficient Ideas
--------------------
  > leverage C++, Go
  > simple network protocol ~ !HTTP
  > sensible encodings
  > --> self describing vs schema




Scalable + Self-Organizing + Distributed Systems --> Principles
---------------------------------------------------
 > 1/ No SPOC
 > 2/ Linear, incremental scalability
 > 3/ Fault design & Dependable Failover
 > 4/ Ability to balance load as it evolves
 > 5/ Warm handoff - fewer dropped calls
 > 6/ Fault Containment Strategy
 > 7/ Operational Tooling + Visibility





 Clustering vs Sharding
-------------------------------
 > ->-> Clustering
 > - -  data distributed AUTOmatically
 > - -  data can move
 > - -  rebalances to distribute capacity
 > - -  nodes communicate with each other

 > ->-> Sharding
 > - -  data distributed MANUALly
 > - -  data does not move
 > - -  split data to distribute load
 > - -  nodes are not aware of each other

 > ->-> DataStore Clustering -> Examples
 > - - Cassandra, Membase, HBase
 > - - Auto scale
 > - - spatially distributed 
 > - - HA & Load Balancing
 > - - No SPOF - Single Point of Failure

 > ->-> Why Sharding
 > - - can split your datastore & add more capacity
 > - - HA & LB
 
 > ->-> Pre - Sharding -> Tasks
 > - - remove all JOINs
 > - - remove all Complex Queries
 > - - Add Cache
 > - - Funcationally shard as much as possible

 > ->-> DataStore Design -> Transition
 > - - 1 DB + FKs + Joins
 > -> -> 1 DB + DeNormalized + Cache
 > -> -> 1 DB + Read Slaves + Cache
 > -> -> several functional sharded DBs + Read Slaves + Cache
 > -> -> ID sharded DBs + Backup Slaves + Cache

 



-0- Asyncore 
------------------
  > multiple asynchronouz connections
  > in the same OS thread


-0- Green threads
-------------------
  > Emulate multi-threaded environments 
  > NO relying on native OS capabilities, 
  > and they are managed in user space instead of kernel space, 
  > enabling them to work in environments that do not have native thread support.

 -0- Green Threads
---------------------
  > known as Space Threads or Fibers
  > manage concurrency in a COOPERATIVE than PRE-EMPTIVE WAY

 -0- Python's threads
----------------------
  > are implemented as pthreads (kernel threads) 
  > and because of the Global Interpreter Lock (GIL), 
  > A python process only runs ONE THREAD at a time.


 -0- Green Threads && Evented IO
------------------------------------
  > focussed on multi-tasking
  > no overhead of OS based multi-tasking
  
 -0-  Evented IO
---------------------
  > lets the server to continue work
  > it waits for the IO ops
  > deals with the IO events
  

 -0- Green Threads via CoRoutines 
----------------------------------
  > green threads resemble coroutines
  > HOW ?
  > both start & stop @ arbitary, programmer specified points


 

 -0 Generator
------------------------
  > produce a sequence of results
  > via yield statement
  > any function that has a yield statement becomes a Generator func
  > function is not auto executed
  > func only executes on next()
  > yield produces a value, but suspends the function

 -0 Generator as Processing Pipelines
-------------------------------------
  > similar to Shell pipes in Unix
  > stack a series of generator funcs together into a pipe & pull items
 
 -0 More than generate Values > Generator ++
----------------------------------
  > More than just generation
  > When generator can consume value
  > so you have to send the value to be consumed
  > sent values are returned by yield
  > so yield needs to be used as an EXPRESSION
  > i.e. R.H.S of an assignment
  > coroutine generally consume value


 -0 Coroutine Priming
-----------------------
  > must be primed by first calling next() 
  > OR
  > calling send(none)

 -0 Coroutine Priming - Wrapper/Decorator
--------------------------------------------
  > priming is easy to forget
  > built a decorator .. python snippet

def coroutine(func):
  def start(*args, **kwargs)
    cr = func(*args, **kwargs)
    cr.next
    return cr
  return start

//usage
@coroutine
def grep(pattern)
  ...

 -0 Closing a coroutine
----------------------------
  > use .close() to shut it down
  > ref Python
  > close() can be caught as if its an Exception
  > use try ... except GeneratorExit

 -0 Keep it Straight
---------------------
  > Generator produces VALUE
  > Generator produce data for iteration
  > Coroutines are consumers of data
  > Dont mix together
  > Coroutines are not related to ITERATION


 -0 Coroutine - Using as Pipelines
-----------------------------
  > chain coroutines together
  > push data through pipe with send() operations
  > the pipeline needs an initial source - a producer
  > pipeline must have an end point - a sink
  > pipeline - Filter or Transformation

 -0 Piplines w.r.t Generator & Coroutine
------------------------------------------
  > Generator PULL data through the pipe with iteration
  > Coroutines PUSH data into the pipeline with send()

 -0 Coroutine & Branching
-------------------------
  > send data to multiple destinations
  > example - Broadcasting
  > broadcast can take in multiple target with each target having an ability to send

 -0 Coroutine & Event Dispatching
----------------------------------------
  > SAX is an event driven approach to XML parsing
  > SAX is good for large files, where large memory foot print is avoided
  > now u can dispatch SAX events into coroutines
  > SAX parser -- events --> Handler --send() --> event,value

 -0 send() & Synchronization
-----------------------------
  > send() - should be properly synchronized
  > if send() is called on already executing coroutine, your program will crash
  > e.g. Multiple Threads sending data into the same target coroutine

 -0 data targets
---------------------
  > data send to coroutines
  > data send to Threads via Q
  > data send to Processes via messages
  > hence, problems will be common across corotuine, thread & process

 -0 Limitations & Coroutines
--------------------------------
  > no loops or cycles
  > coz - stacked sends build up a kinda call-stack 
  > remember - send doesnot return until the target yields
  > calling a coroutine thats already in process of sending you'll get ERROR
  > send doesnot suspend coroutine execution


-0 Coroutine as Task
----------------------
  > localized variable
  > own control flow
  > can communicate to other coroutines
  > yield suspends execution
  > send resumes execution
  > close terminates execution
  >> Hence, coroutine are tasks
  >> So can we use the coroutine directly for Multitasking



-0 Coroutines - Usage
-------------------
  > used 2 express Simulations, 
  >> Games, Async I/O, Event Driven Programming, co-operative multitasking

 -0 Greenlet
-----------------------
  > a lightweight coroutine provided to Python as a C extension module
  > run inside the OS process
  > only 1 greenlet is ever run at any time
  > so there is no true PARALLELISM

 -0 Greenlet vs Multiprocessing/Threading libraries
----------------------------------------------------
  > latter spin processes & POSIX threads which are scheduled by the OS & are truly parallel


 -0 Deterministic behaviour
------------------------------
  > geevent is normally deterministic
  > non-deterministic behavior can find their way in when dealing with sockets or files
 
 -0 Why non-determinism
---------------------------
  > due to race condition
  > when 2 concurrent threads or processes depend on some shared resource 
  > when 2 concurrent threads or processes try to modify value
  > 


 -0 Idea behind Concurrency
-----------------------------
  > larger task broken into a collection of sub tasks
  > each one is scheduled to run simultaneously or asynchronously
  > they will not run one at a time or synchronously
  > a switch between 2 sub tasks is known as a context switch




 -0 Paralleism
--------------------
  > make program run faster
  > make use of multiple CPUs, GPUs
  > use more hardware

 -0 Concurrency
----------------------
  > program structured into multiple threads of control
  > like threads or processes
  > synchronize by lock
  > synchronize by mutable shared variable
  > synchronize by message parsing


 -0 Concurrency & Parallelism
--------------------------------
  > both r orthogonal to each other
  > both can be achieved at the same time

 -0 Concurrency without parallelism
------------------------------------
  > old days without multiple cores
  > multiple processes running on same core
  > multiplexed

 -0 Parallelism without Concurrency
------------------------------------
  > dont let the developers write concurrent programs
  > hence developer do no mistake of locks, synchronization, etc stuff
  > libraries will do that internally


 -0 Task Concept
----------------------
  > sub divide problem into TASK
  > has independent control flow
  > has internal state
  > can be scheduled (resumed/suspended)
  > can communicate with other tasks

 -0 CPU  & Multitasking
-----------------------
  > CPUs dont know about multitasking
  > application programs dont understand multitasking
  > Its the OS which knows

 -0 OS & Multitasking
------------------------------
  > OS allows > 1 processes to execute @ once
  > rapid switch
  > When CPU runs the program, it doesnot run the OS
  > So how does OS switch between programs when its not running

 -0 Interrupts & Traps
----------------------------
  > Interrupts - H/W related signal
  > Traps      - S/W related signal
  > CPU suspends its operation during either of above
  > CPU must be suspending the program op & running OS code
  > OS code now switches the task








 -0- Bluelet 
----------------
  > pure python
  > implements Green Threads as native coroutines
  > simple evented socket IO support via native coroutine

 -0- Bluelet vs Greenlet
------------------------
  > Greenlet - more powerful
  > relies on C extension to the Python interpreter



 -0 extract from InputStream
--------------------------------
  > URL can open an input stream
  > FileInputStream is an input stream
  > You read from input stream & dump into some native object

 -0 Serialization & Stream
----------------------------
  > Who takes cares of serialization
  > Just reading from Input Stream
  > & then dump/load into Object
  > Which Object ? How Serialization & DeSerialization is taken care?

 -0 Stream Serialization & DeSerialization
---------------------------------------------
  > input stream is verified against a particular object
  > i/p stream is typecasted to a particular object


0-0 Scripts Block Downloads 0-0-0
--------------------------
+ scripts take time to download
+ however, it blocks downloads of other resources
+ How to overcome this issue?

0-0 Non-Blocking scripts -0-0-
----------------------------
+ include scripts dynamically via DOM methods
+ simply create a new <script> element & append it to the <head>

-0- Do stylesheets BLOCK ? -0-0-
-------------------------------
- they dont in IE
- they do block in FF

0-0-0- Other Ways to Non-Blocking scripts -0-0-
--------------------------------------------------
+ defer - unreliable

+ document.write() - not recommended coding practice

+ XMLHttpRequest to get the source & then execute within eval() 
-> eval() is evil
-> same-domain policy restriction

+ XHR request to get source, create a new script tag, set its content 
-> more complex
-> same-domain policy 

+ Load script in an iframe - complex, iframe overhead, same-domain policy


-0- Event Loop -0-
+ The event loop is a way of having a non-blocking I/O (NIO in Java parlance) 
--> and to allow your application to scale more effectively by offloading I/O activities
--> to native functions in the operating system.

-0- Event Loop + Java + Example -0-
+ So the java.nio packages implement some of the key-functionality 
--> and we use the Netty framework. 
--> Netty builds utility classes and functions on top of NIO 
--> which make it much easier to work with that programming model

-0- Avoid blocking the Event Thread .. HOW ? ? -0--
+ The typical pattern is to implement a callback and this is what they underlying structure in Java is doing, 
--> they select the selection keys and you get an event of a selector
--> and then you can work with the events. 
--> If it’s a socket then you listen on a server socket, 
--> you get an event telling you there has been a connect event 
--> and you create a new socket channel. 
--> Because you can place a request, it’s not a queue, 
--> but if you place a request to be notified when something has happened, 
--> you can then go off and do other work until that event arrives and then you go back and pick the data up or respond in some way. 

-0- How to handle Blocking APIs ? -0-
--> For newer applications where there is async we can do implementations straight away, 
++ --> but when there are things like JDBC, <--
--> there is not a non-blocking JDBC implementation that I’m aware of, 
--> so we have to handle that slightly differently in vert.x, 
--> so rather than having one event loop, one thread pool that is engaged in that activity, 
--> we have to have a second pool of threads which we call the worker pool. 


--> Some Implementation 4 blocking APIs <--
And the worker pool has typically more threads in it, 
but it still listens on the EventBus and it still has all the same capabilities 
but we separate them out, so that you can make a decision to put your blocking activity in a pool 
with more threads available to it, in the knowledge that the rest of your application can remain async. 
So we have a pragmatic view of how to handle this and 
this also means that we have access to the rest of the Java ecosystem in terms of libraries
because significant numbers of those are not non-blocking implementations.

-0- What about Actor Model -0-
- one of the things we looked at was how best to handle handlers. 
- Do we do the same things as we’ve done in Groovy which is passing closures or Scala functions or can we use actors?


 -0 ASM 4 
-------------
  > Event driven approach to manipulate byte code
  > Can manipulate via in-memory too
  > 

 -0- Thread & Pool & Shutdown
----------------------------

public void startMonitoring(int nthreads) {
        int delay = 1000 / manager.hosts.size() * nthreads;
        for (int i = 0; i < nthreads; i++) {
            PoolMonitoringThread pmt = new PoolMonitoringThread();
            pmt.loopDelay = delay;
            pmt.pool = manager;
            pmt.start();
            threads.add(pmt);
        }
    }


public void shutdown() {
        for (PoolMonitoringThread pmt : threads) {
            try { pmt.join();} catch (InterruptedException e) {}
        }
        manager.shutdown();
    }




References:
1. http://yuiblog.com/blog/2008/07/22/non-blocking-scripts/
2. http://www.infoq.com/interviews/williams-vertx
3. http://sdiehl.github.com/gevent-tutorial/
4. https://github.com/exalead/commons-httpclient-failover/
5. http://www.infoq.com/presentations/YouTube-Scalability-Lessons
