+ + Developer's cookbook for cert management used in various APIs/frameworks. . . 

0-0-0 SAML Signing 0-0-0
+ IDP sends a signed SAML assertion using its private key
+ Signature can include the X.509 (public key) certificate
+ This public key is Base64 encoded before being included in the signature
+ Signed assertions will be Validated by the trusting party

0-0-0 Server Authentication 0-0-0
+ If SSL is configured at the server only then it is termed as Server Authentication
+ To enable Server Auth, you need to ::
> STEP 1 - Create a public/private key pair
> STEP 2 - Obtain  a certificate
+ This cert is known as Server Certificate or Personal Certificate
+ This cert is used by the Server to authenticate itself to the client

0-0-0 What does the client do in case of Server Authentication 0-0-0
+ Client will obtain the cert of the CA that issued the server cert
+ The client maintains a list of trusted issuers
+ Client will add CA certificate to that list

0-0-0 Who Stores the certs 0-0-0
+ Private keys & Personal Certs are stored in KeyStores
+ Public Keys & CA certs are stored oin TrustStores
+ 

0-0-0 On Encryption at SAML 0-0-0
+ Use partner's Public Key to encrypt
+ This Public Key will correspond to the partner's Private key
+ Partner will use its Private Key to decrypt

0-0-0 Different SAML Signing Requirements 0-0-0
+ Message can be signed
+ Assertion can be signed
+ Use can use same or different keys for signing Message & Assertion
+ Above is applicable only for SAML 2.0

0-0-0 Password protection 0-0-0
+ Private/Personal keys in a keystore can be encrypted by a password
+ The KeyStore is also protected by a password
+ 

-0- private key & public cert as 2 files -0-
+ They received it as 2 separate files, a .crt file with the certificate, and a .key file with the private key. 
+ We are trying to combine these files into a .pfx file to import into the Certificate Store.
>> openssl -in a.crt -inkey a.key -export -out a.pfx
>> import the .pfx output file from the command above into Internet Explorer, 
>> and then export it from IE with the private key and all of the CA certificates in the certification chain. 
>> The resulting exported .pfx from IE would then successfully import into the Certificate Store.

-0- Public key in Element
------------------------------------------------------
  > Signature > KeyInfo > X509Data > X509certificate
  > KeyInfo will contain below public cert details
  
  # Parse the certificate text into an M2Crypto X509 certificate object    
    x509CertObject = M2Crypto.X509.load_cert_string(self.certificate)
    
    # Remove the "-----BEGIN CERTIFICATE-----" and "-----END CERTIFICATE-----"
    # and clean up any leading and trailing whitespace
    certificatePEM = x509CertObject.as_pem()
    certificatePEM = certificatePEM.replace("-----BEGIN CERTIFICATE-----","")
    certificatePEM = certificatePEM.replace("-----END CERTIFICATE-----","")
    certificatePEM = certificatePEM.strip()


-0- Sign the SAML Response
--------------------------
  > Do the usual steps of XML building that will represent the Signing Element
  > e.g. -> Signature, SignedInfo, CanonicalizationMethod, Algorithm, SignatureMethod, Algorithm 2nd time, 
  > > Transforms, Transform, Algorithm 3rd time, DigestMethod, Algorithm 4th time,
  > > DigestValue, SignatureValue
  

  > DigestValue -> hashing
----------------------------------------------
  > > digestValueElement = doc.createElement("DigestValue")
  > > hash = hashlib.sha1()
  > > hash.update(unsignedSAMLResponse.toxml())
  > > digestValue = doc.createTextNode(base64.b64encode(hash.digest()))
  > > digestValueElement.appendChild(digestValue)

  > SignatureValue -> sign above hash
------------------------------------------------
  > > signatureValueElement = doc.createElement("SignatureValue")
  > >  m = M2Crypto.RSA.load_key_string(self.privatekey)
  > >  signature = m.sign(hash.digest(),"sha1")    
  > >  signatureValueText = doc.createTextNode(base64.b64encode(signature))
  > >  signatureValueElement.appendChild(signatureValueText)

-0- Signing - just append to unsigned
-----------------------------------------
  > A signature will have 2 main elements
  > SignedInfo & SignatureValue
  > SignedInfo = hash
  > SignatureValue = sign(hash)
  > But this is just appended to the unsigned document/element
