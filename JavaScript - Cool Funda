
 
-0 Eventize an Object - Usual Way
----------------------------------------
 AnObject.prototype.emit = function(event, param) {
  if(typeof this._callbacks[event] === 'function')
		this._callbacks[event].call(this, param);
};

 AnObject.prototype.on = function(event, callback) {
  if(typeof callback === 'function')
		this._callbacks[event] = callback;
	return this;
};


-0- Deep Copy
--------------------  
  > Most of the time, you want to do a 'deep copy' so that an entirely new array is formed, 
    This is done by adding 'true, {}' as the first two arguments:

  > $.extend(true, {}, cloudstack.someObject, { a: 1, b: 2 })


 -0- Transform Contents
-------------------------  
  > $.map(array, function(item) {
      return {
               fieldA: item.fieldA,
               fieldB: item.fieldB 
             };
    });

  > Used to transform the contents of array items


-0- Values & Defaults
--------------------------
 + true/false
   > this.silent       = options.silent || options.silent !== true;
 + object
   > this.target       = options.target || {};
 + true/false again
   > this.hostnameOnly = options.hostnameOnly === true;


-0-0- typeOf Checks
----------------------
  + typeof options.router === 'string'
  + typeof options.router === 'object'


 -0 Object Type Definition
---------------------------
  function MyType(){
    if(!(this instanceof MyType))
       throw new Error("Constructor cannot be called as a function");
  }

  var myInstance = new MyType(); //OK
  MyType(); //Error: Constructor cannot be called as a function


 -0 Private Fields
-------------------
  > can be achieved with constructor closures
  > variables defined within constructor function can be used as private fields
  > CANNOT access these private fields from a prototype method


 -0 Private Fields & Yet wanna Access
--------------------------------------------
  > need to create getter & setters of these private fields inside Constructor
  > else create Priviledged Methods i.e. instance methods inside Constructor function
  > Now Priviledged Methods can access private members

 -0 Public Members & Priviledged methods wanna Access
---------------------------------------------------------
  > NOTE - Priviledged methods r inner functions of Consrtuctor & hence 
  > that = this; //applies for accessing Instance members

 -0 Shared
--------------------
  > Prototype fields, methods & objects are shared
  > all the instances will reflect the change to prototypes

 -0 Private vs Public
------------------------------
  > Its a var vs. this

 -0 Private Methods
------------------------
  > also known as Nested or Inner functions
  > well supported .. coz define a function sans this in any part of the outer function

 -0 Inner Function within a Constructor
-------------------------------------------
  > NOTE - instance variables of the outer function e.g. Constructor 
  > cannot be accessed from inner function of the Constructor
  > that = this; //remedy for above
  > private variables can be accessed from inner function
  > argument of outer function can be accessed from inner function



 -0 Instance Members
----------------------------
 > are created via
  >> 'this' keyword
  >> prototype
  >> constructor closure
  >> Object.defineProperty

  function Cat(name){
    var voice = "meow";
    this.name = name;
    this.say  = function (){
        return voice;
    }
  }
   
  Cat.prototype.eat = function() {
     return "Eating";
  }

  var cat = new Cat("Fluffy");

  Object.defineProperty(cat, "numLegs", {value:4, writable:true, enumerable:true, configurable:true});

 
 -0 Public Static Members
-------------------
  > no direct support for static members
  > Constructor functions are used to create Static members
  > cannot be accessed via this
 
  function MyClass(){ }

  //public static method
  MyClass.getType = function() {
    return "typeee";
  }

  //public static field
  MyClass.version = "1.0";

  MyClass.prototype.callMe = function(){
    console.log(MyClass.version); //this.version will return undefined
  }


 -0 Private Static Members
----------------------------

var Book = (function () {
  // private static field
  var numOfBooks = 0;
  // private static method
  function checkIsbn(isbn) {
    if (isbn.length != 10 && isbn.length != 13)
    throw new Error(“isbn is not valid!”);
  }

  function Book(isbn, title) {
    checkIsbn(isbn);
    this.isbn = isbn;
    this.title = title;
    numOfBooks++;
    this.getNumOfBooks = function () {
      return numOfBooks;
    }
  }
  
  return Book;
})();

var firstBook = new Book(“0-943396-04-2”, “First Title”);
console.log(firstBook.getNumOfBooks()); // 1
var secondBook = new Book(“0-85131-041-9”, “Second Title”);
console.log(firstBook.title); // First Title
console.log(secondBook.title); // Second Title
console.log(firstBook.getNumOfBooks()); // 2
console.log(secondBook.getNumOfBooks()); // 2



  -0 Abstract Types
---------------------------
  > will be required for common functionalities
  > However, mixin is a better fit... check again..
  > Object Literal can have nested objects
  > So check again for better fits

(function(){
  
  var abstractCreateLock = false;
  
  // abstract type
  function BaseForm(){
   if(abstractCreateLock)
    throw new Error(“Can’t instantiate BaseForm!”);
  }

  BaseForm.prototype = {};
  BaseForm.prototype.post = function(){
   throw new Error(“Not implemented!”);
  }

  function GridForm(){
  }

  GridForm.prototype = new BaseForm();
  abstractCreateLock = true;
  GridForm.prototype.post = function(){
   // ...
   return “Grid is posted.”;
  }
 
  window.BaseForm = BaseForm;
  window.GridForm = GridForm;
})();

var myGrid = new GridForm();
console.log(myGrid.post()); // Grid is posted.
var myForm = new BaseForm(); // Error: Can’t instantiate BaseForm!



 -0 Singleton Object
----------------------
  > Nothing to be done specifically
  > Its so simple
  > Just create a Object Literal
  > or Just create a Function with all public static members


 var Logger = {
   enabled:true,
   
   log: function(logText){
    if(!this.enabled)
     return;
    if(console && console.log)
     console.log(logText);
    else
     alert(logText);
   }
 }

Or

 function Logger(){
 }

 Logger.enabled = true;
 Logger.log = function(logText){
  if(!Logger.enabled)
    return;
  if(console && console.log)
    console.log(logText);
  else
    alert(logText);
 };


 -0 new operator
---------------------
  > new operator creates a new object
  > then calls the constructor function while assigning the newly created object as 'this'


 -0 Inheritance
-----------------
 function Child(){
   //Super Constructor is not called, we have to call it
   //We need not instantiate the parent. Do we in Java. Nopes
   //We have to set up the contract only
   Parent.call(this);
   
   //Now do all the instance member creation
   //This can call the Parent's instance methods too

 }

 //Aliter Way ...

 //Just rechristine the Prototype object into the Parent Object
 Child.prototype = new Parent();
 //Re-point the constructor to its own Constructor
 //As it might be pointing to the Parent's constructor
 Child.prototype.constructor = Child;

 //Huh!!! need to think so hard that we forget what inheritance is useful for !!!


 




References:
1/ http://www.infoq.com/presentations/CoffeeScript-Introduction
2/ DZone - Object Oriented JavaScript - By Ibrahim Levent
