 
 - Wrapper over Primitive/NIO Buffer -
 ---------------------------
 - Netty Channel Buffer - basic stuff
 
 - Byte Transporter -
 ------------------------
 - Netty Channel ~ created via ChannelFactories
 
 - Byte Futures & Listeners -
 --------------------------------
 - Netty ChannelFuture & ChannelFutureListener ~ deferred result
 
 - Boss Threads  ~  Reactor -
 --------------------------------
 - Refer Reactor pattern
 - Boss threads create and connect/bind sockets and then pass them off to the worker threads. 
 - In the server, there is one boss thread allocated per listening socket. In the client, there is only one boss thread*
 
 - Worker Thread -
 -----------------------
 - refer Reactor pattern
 - perform all async IO ops
 
 - Old & New Transporter/Channel -
 -------------------------------------
 - TCP NIO Channel - async comm
 - UDP NIO Channel - connection less
 - TCP OIO Channel - sync comm
 - UDP OIO Channel - async connection less
 
 # NOTE - Different ChannelFactories to create each !
 
 - Netty & Executors -
 ------------------------
 - Create a cached thread pool for incoming connections
 - Create a cached thread pool for processing IO
 
 
 - set TCP keepAlive -
 -------------------------
 - prolongs each TCP connection
 - makes NAT router happy
 
 - set TCP noDelay -
 ------------------------
 - glues small TCP packets
 - tries to reduce bandwidth
 - increases latency
  
 - Netty & Interceptors -
 -----------------------------
 - Channel Handlers ~ register to ChannelEvents
 - Channel Pipelines maintains the order of Handlers
 
 - ChannelEvents -
 ----------------------
 - Connect, Disconnect, Write
 
 -----------------------------------------
 # Note - EventHandler == ChannelHandler #
 -----------------------------------------
 
 - Whats the use of Listener ? -
 ---------------------------------
 - fire & forget by registering a listener on ChannelFuture
 - listener receives a callback when the operation completes
 - callback has a reference to the ChannelFuture
 
 ---------------------------------------------------------------------------------
 Q Hows of fire & Forget ? -
 - ChannelFuture listens to event & triggers the callback via registered listener
 - These events are also broadcasted to ChannelHandlers.
 - Hence, implement logic in callbacks or ChannelHandler of the Pipeline
 ---------------------------------------------------------------------------------
 
 - Netty & Encoding/Decoding -
 ----------------------------------
 - ChannelHandlers r the usual Encoders & Decoders
 - transform ChannelBuffer to Other impls & vice-versa
 
 - Netty & ObjectEncoder -
 -----------------------------
 - From java object -to- ChannelBuffer
 
 - Netty & ObjectDecoder -
 ------------------------------
 - From ChannelBuffer -to- Java object
 
 - Netty & Codecs -
 -----------------------
 - ObjectEncoder/Decoder
 - Google Protobuf
 - Compression
 - Http Request/Response
 - Base64
 
 - Netty & Events -
 --------------------
 - ChannelEvent - wrap ChannelBuffer
 
 - Selector -
 -----------------
 - delegate event to OS
 
 - Tunneling Channel -
 --------------------------
 - HttpTunnelingClientSocketChannelFactory
 - Tunnel to a Netty Server via a special Netty Servlet
 
 # Applications typically exploit HTTP tunneling by, first, trying to establish a connection with a server 
 # using a normal socket connection. If the socket connection attempt is rejected by a firewall, 
 # the application will automatically retry the connection by encapsulating its data within an HTTP POST request. 
 
 
 - Within JVM Channels -
 ----------------------------
 - DefaultLocalClientChannelFactory & DefaultLocalServerChannelFactory
 
 
 - 2 Thread Executors -
 ---------------------
 - 1 for BOSS Threads & other for Worker Threads
 
 - Worker & Await -
 -----------------------
 - You want Worker threads to be Working & not Waiting
 - So avoid await calls in Worker threads
 
 - Client & awaitXXX -
 --------------------------
 - typically client will want to wait & so is useful w.r.t client code
 
 - ChannelHandler vs Up/Down Stream Handlers -
 -----------------------------------------------
 - CH can act as either or both .. matter of implementing both Interfaces
 
 --------------------------------------------------------------
 # Read Up . Write Down . 
 # Read from remote using Upstream Handler. 
 # Write to remote using Downstream Handler. 
 ---- -
 ----------------------------------------------------------
 
 - Dynamic Modification of ChannelPipeline -
 -----------------------------------------------
 - possible to add/remove handlers in a thread safe way
 
 - StaticChannelPipeline -
 -----------------------------
 - is an immutable Pipeline with better performance
 
 - ChannelHandlerContext
 -------------------------
 - Allows the handler to interact with the pipeline
 
 - ObjectInputStream -
 ------------------------
 - read from SocketInputStream & fill into ObjectInputStream
 
 ---------------------------------
          SIS -----> OIS
  10101010101 -----> OIS  
 ---------------------------------
 
 
 
 
 
 
 
 
 References
 --------------
 - http://seeallhearall.blogspot.in/2012/06/netty-tutorial-part-15-on-channel.html
 
 
