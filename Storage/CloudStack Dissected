 - References -
 -------------------
 - http://www.slideshare.net/buildacloud/1-cloudstack-storage-subsystem
 - http://architects.dzone.com/articles/cloudstack-storage
 - http://cloudstack.apache.org/docs/en-US/Apache_CloudStack/4.0.2/html/Admin_Guide/working-with-volumes.html
 
 - Root or Data Disk -
 ---------------------
 - Tab in the VM wizard always says "Data Disk Offering," 
 - If you create a VM using ISO, this step actually means Root Disk Offering.
 - If this is the case, the tab name should depend on whether the user chooses
    -- Select Template (Data Disk Offering) or Select ISO (Root Disk Offering).

 

 - Root Disk of a Pri Stor -
 -------------------------------
 - has a '/' in the file system
 - usually the boot device
 - attached during definition of 'Compute Offering'
 
 - Data Disk of a Pri Stor -
 ---------------------------------
 - /opt or D: 
 - multiple data disks can be mounted
 
 - Primary Storage Types -
 -----------------------------
 - PreSetup for XenServer, vmfs for VMware, and SharedMountPoint for KVM.
 
 - Cloudstack & CHAP -
 -----------------------
 - as of CloudStack 4.0 CHAP is not supported
 - So Hypervisor <--> iSCSI target communication needs to be done manually
 
 - Hypervisor & iSCSI target -
 -------------------------------
 - XenServer - create a storage repository based on the iSCSI volume. 
 - VMware    - create a datastore based on the iSCSI volume.
 - KVM       - set up a shared mount point based on the iSCSI volume.
 
 
 - Secondary Storage - Types
 ----------------------------
 - Nfs / S3 / Swift
 
 - Secondary Storage VM -
 -----------------------------
 - a bootstrap VM created by CS
 - place where storage provision happens
 - VM's cpu/ram/network throughput is fine grained controlled
 
 - Mgmt Server Orchestration Engine <--> Storage Provisioning
 -----------------------------------------------------------------
 - [ Storage Orchestration Engine <=> Storage Plugin ] <=> Provisioning Service
 - OrchestrationService <=> DataStore Plugin <=> ProvisoningAgent
 
 - OrchestrationService -
 -------------------------
 - Image / Volume / Snapshot / DataMotion ~ Services
 
 - ProvisoningAgent -
 ------------------------
 - Storage Box / Hypervisor Agent / SSVM ~ Agents
 
 - Orchestration Plugins -
 ------------------------------
 - Pluggable UI
 - DataStoreDriver
 - DataMotionStrategy
 - SnapshotStrategy
 
 - Cloud Engine vs Cloud API -
 ----------------------------------
 - Orchestration Logic vs Business Logic
 - deploy service VMs (SSVM & VR) vs. deploy user VM
 - virutalization terms vs offering terms
 

 - Primary Storage -
 -----------------------
 - Root Disk & Data Disk

 - Primary Storage - Scopes
 -------------------------------
 - Local / Cluster wide / Zone wide

 - Primary Storage - Types -
 ----------------------------------
 - NFS / ISCSI/ FC / Ceph

 - Storage as Service -
 --------------------------
 - Storage Tags
 - Disk offering with tags
 
 
 
 
 - Compute the Signature -
 ------------------------
 - lower case values, replace + with %20
 - generate hmac using sha1 hash function
 - Base64 encode the digest
 - Encode for http transport
 -- Form the signature by adding to the url &signature=
 
 
 - CS Client in JS & Clojure -
 -----------------------
 - https://github.com/ragnar-johannsson/csclient
 - https://github.com/pyr/clostack
 
 
 - Default Template -
 --------------------------
 - provided by cs - provides a CentOS template
 - provided per Xen, kvm, vsphere
 - root pw of default tpl - password
 
 - Create VM from tpl -
 ---------------------------
 - login as admin ... Instances
 - Add Instance - select zone - select tpl or ISO Boot
 - BE SURE THE H/W U HAVE ALLOWS STARTING THE SELECTED SERVICE OFFERING
 - Submit - will create & start the VM
 
 - Creating vs Starting a VM -
 ------------------------------
 - VM can be created without starting
 - req param startVM in the deployVM API provides this
 
 - Windows VM on XenServer -
 --------------------------------
 - require PV drivers
 - drivers can be provided to the tpl
 - can be added after a VM is created
 
 - PV drivers -
 ------------------
 - reqd for - mounting additional vols & ISO images, live migration, & graceful shutdown
 
 
 
 
 
 
 
 
 - Typical Http Flow -
  -------------------------
  - A command as a http query param
  - Command attributes are http query params
  - Intercepted @ servlet layer & transformed to the required Command
  - Now the base commands has the list of ALL possible Services - injected services
  - execute of Command is invoked @ servlet layer
  - Appropriate Injected Service's method invoked taking in 'this'. i.e. Command object as a param
  - Typically One usecase in a Command - single responsibility - CreateStoragePoolCmd
  
  - Typical Plugin Requirement -
  -------------------------------   
  - Driver Impl 
  - LifeCycle Impl 
  - Provider Impl 
  
  # note - ProviderManager is managed by CloudStack !!
  
  - Making sure your Data Store Provider get Called -
  ------------------------------------------
  - DataStoreProviderManagerImpl will have a list of several Provider Impls.
  - The getDataStoreProvider(String providerName/storeId) of DataStoreProviderManagerImpl is the key
  - Earlier, the name of the Storage provider will be set during execution of CreateStoragePoolCmd.
  
 
  #  Who should have the control for verifying the suitability/validity of a Storage Pool? 
  -----------------------------------------------------------------------------------------
  - Elastistore or CloudStack !
  - Its Cloudstack who will provide the logic.
  - The CreateStoragePoolCmd will have done the job for Elastistore in Cloudstack
  - Later, when AttachVol etc CMDs are executed, the above Storage Pool ID will be utilized.
  
  # How about provisioning ? 
  ----------------------------
  - If cloudstack determines the logic to get the StoragePool & hence the respective Data Store
  - How will provisioning intelligence of Elastistore be utilized?
  
  
  # How CloudStack manages instance injection with dynamic property setting ?
  -----------------------------------------------------------------------------
  - Check DefaultPrimaryDataStore.createDataStore() ...
  - this creates a new instance of DefaultPrimaryDataStore
  - the runtime properties are set against this newly created instance
  
 
 - A Storage Usecase :: AttachVolume -
 ---------------------------------------
 - starts with AttachVolumeCmd
 - Service layer i.e. VolumeMgrImpl - attachVolumeToVM
 - Service layer - Check for Volume's validness
 - Service layer - Check for VirtualMachine's validness
 - Service layer - Check the no of DataVolumes to a VM is supported by hypervisor
 - Service layer - Check if VM & Volume are in the same Zone i.e. DataCenterId
 - Service layer - Check if attaching Volume with local disk is allowed i.e. DataCenter should allow local storage
 - Service layer - permission check
 - Service layer - volume state checks - i.e. Volume's validness
 - Service layer - No of Root Volumes check - 
 - Service layer - RootHypervisor Type check with dataDiskHypervisorType
 - Service layer - createVolOnPrimaryStorage
 - Service layer - Check for the need to move volume
 
 |__ :: More Specific - CreateVolOnPrimaryStorage -
 ---------------------------------------------------------------
 - Service Layer - getRootDiskTpl
 - Service Layer - getDataCenter
 - Service Layer - getStoragePool
 - Service Layer - getServiceOffering
 - Service Layer - getDiskOffering
 - Service Layer - getClusterID
 - Service Layer - based on state of Volume - Its Created or Uploaded
 -
 
 - Volume vs VM -
 ----------------------------------------------- 
 - Once Volume attached to a VM --> Volume gets an InstanceId
 
 - Volume Type -
 ----------------
 - One of Volume's TYPE is - DATADISK
 - Image based Volume ~ different ~ than PrimaryVolume
 - Image based Volume ~ ObjectInDataStore
 - PrimaryVolume      ~ Data Volume
 
 - VolumeVO - The persistence table - ORM -
 ---------------------------------------------
 - VolumeObject - composes _volumeVO, _volStateMachine, dataStore 
 - VolumeObject - implements VolumeInfo for other goodies
 - VolumeObject - typically is much more than just a persistence table representation
 
 - Others -
 --------------
 - Service Offering seems to convey opposite behavior vs Disk Offering
 - Service Offering - can be local type or shared type
 - Template needs to be Downloaded to the Zone
        
  
  - Adapter ~ Pluggable Code within Cloud Stack
  ---------------------------------------------------
  - A ComponentLifeCycle interface  ~ configure/start/stop/run-level
  - ComponentLifeCycleBase implements ComponentLifeCycle
  
  - An Adapter interface extends ComponentLifeCycle  interface  
  - A concrete AdapterBase extends ComponentLifeCycleBase implements Adapter
  
  - An adapter LifeCycle Interface extends Adapter  
  - An abstract adapter LifeCycle extends AdapterBase implements LifeCycle interface  
  - A concrete adapter LifeCycle Impl extends abstract adapter lifecycle in plugin project
  
  
  - PluggableService ~ Method for Pluggable Code within CS
  ---------------------------------------------------------------
  - A ComponentLifeCycle interface  ~ configure/start/stop/run-level
  - PluggableService interface ~ expose pluggable methods
  - An Adapter interface extends ComponentLifeCycle  interface  
  - A ResourceStateAdapter interface extends Adapter interface ~ used for Agent Ops
  
  - A Plugin Interface extends PluggableService ... 
  - A concrete plugin impl extends AbstractBase, implements ResourceStateAdapter, someotherLifecycleInterface, PluginInterface
  
  
  
  
  Questions ?
  - --------------
  1/  DefaultPrimaryDataStoreProviderManagerImpl & DataStoreProviderManagerImpl have a cyclic dependency!
  
      Why does DataStoreProviderManagerImpl compose DefaultPrimaryDataStoreProviderManagerImpl ?
      
      DefaultPrimaryDataStoreProviderManagerImpl composes the DataStoreProviderManagerImpl, which seems fine.
      The registerDriver & registerHostListener can be done in DefaultPrimaryDataStoreProviderManagerImpl class itself in its 
      @PostConstruct method . Ofcourse, this will be effective only when getDataStoreProviders() of
      DataStoreProviderManagerImpl returns the providers instead of null.
      
      An alternative approach might be to have DefaultPrimaryDataStoreProviderManagerImpl extend
      DataStoreProviderManagerImpl instead of composing the latter. This way the configure method can be overridden to register
      drivers & host listeners.
      
  2/  How does a DiskProfile relate to Volume ?
  
  3/  Does Elastistore have any virtualization/intelligence software on Secondary Storage ?
  
  4/  If Cloudstack is used with EC2/S3, is there any role for elastistore ?
  
  5/  Did/Will Cloudstack go the Cocoon way for componentization? 
      Was any other frameworks considered, e.g. Vert.x or Reactor or Netty considered ?
  
  6/  The plugin Driver impl methods make use of AsyncCompletionCallback params. 
      Are these params capable enough to accept long running programs which give a job id instead of a success & success results ?
  
  7/  If Elastistore builds the CloudStack plugin, it has to implement PrimaryDataStoreDriver.
      It exposes following methods:
      - takeSnapshot, revertSnapshot, grantAccess, revokeAccess, listObjects, createAsync, deleteAsync, copyAsync, canCopy, resize.
      
      Do above methods meet all the requirements that Elastistore provides ?
      
      How/Where will the Admin set the IOPs, Latency, Throughput related values that are provided by Elastistore ?

  8/  Do we need to implement a Lifecycle impl for Cloudstack-Elastistor plugin ?

 - II set of questions -
 ----------------------------
  1/ Is cloud-fire plugin impl the right way to implement for CS 4.1.0 & future releases ?
  1.1 / How are external storage plugin provider implementations configured ?
       e.g. UUID, ID, Driver & LifeCycle needs to be configured. 
            Who will provide the values to the storage plugin provider in a production scenario ? 

  2/ How to make sure that a particular provider is being executed during execution of actual usescases ?
  Answer - The name of the provider should meet this requirement.
          However, which client class will provide this requirement ?

  3/ How to provide custom attributes like IOPS, Throughput & Latency for cloudbyte storage plugin ?
    - Will it be done via a custom LifeCycleImpl ?
 
  4/ Will the cloudbyte plugin implementation subscribe & hence respond to cloudstack events.
    - If yes, need to determine which all events cloudbyte is interested in?
    - Similarly, need to see if cloudstack will be interested in events from cloudbyte ?

  5/ Should we create image data store apart from primary datastore?

  6/ How does cloudbyte handle long running operations ?
  
  
