  - Typical Http Flow -
  -------------------------
  - A command as a http query param
  - Command attributes are http query params
  - Intercepted @ servlet layer & transformed to the required Command
  - Now the base commands has the list of ALL possible Services - injected services
  - execute of Command is invoked @ servlet layer
  - Appropriate Injected Service's method invoked taking in 'this'. i.e. Command object as a param
  - Typically One usecase in a Command - single responsibility - CreateStoragePoolCmd
  
  - Typical Plugin Requirement -
  -------------------------------   
  - Driver Impl 
  - LifeCycle Impl 
  - Provider Impl 
  
  # note - ProviderManager is managed by CS
  
  - Making sure your Data Store Provider get Called -
  ------------------------------------------
  - DataStoreProviderManagerImpl will have a list of several Provider Impls.
  - The getDataStoreProvider(String) of DataStoreProviderManagerImpl is the key
  - The name of the Storage provider will be received from the Command itself
  - e.g. CreateStoragePoolCmd has method called getStorageProviderName
 
 
 - A Storage Usecase :: AttachVolume -
 ---------------------------------------
 - starts with AttachVolumeCmd
 - Service layer i.e. VolumeMgrImpl - attachVolumeToVM
 - Service layer - Check for Volume's validness
 - Service layer - Check for VirtualMachine's validness
 - Service layer - Check the no of DataVolumes to a VM is supported by hypervisor
 - Service layer - Check if VM & Volume are in the same Zone i.e. DataCenterId
 - Service layer - Check if attaching Volume with local disk is allowed i.e. DataCenter should allow local storage
 - Service layer - permission check
 - Service layer - volume state checks - i.e. Volume's validness
 - Service layer - No of Root Volumes check - 
 - Service layer - RootHypervisor Type check with dataDiskHypervisorType
 - 
 
 
 
 
 - Learn the Storage -
 ----------------------------------------------- 
 - Once Volume attached to a VM; former has got a InstanceId
 - Volume give its State . i.e. Destroyed etc
 - one of Volume's TYPE is - DATADISK
 - Image based Volume ~ different ~ than PrimaryVolume i.e. Data Volume
 - Image based Volume ~ ObjectInDataStore
 - VolumeVO - The persistence table - ORM
 - VolumeObject - composes _volumeVO, _volStateMachine, dataStore 
 - VolumeObject - implements VolumeInfo for other goodies
 - VolumeObject - typically is much more than just a persistence table representation
 - 
 


  - Typical Resource Ops Flow -
  --------------------------------
  - CloudStackPrimaryDataStoreLifeCycleImpl
   # Initialize
    - usecase ~ StorageManagerImpl                     ~ cloud-storage
     - LocalStoragePoolListener                        ~ cloud-server
      - AgentManagerImpl                               ~ cloud-server
       - handleConnectedAgent
        - task
       - handleDirectConnectAgent
        - ResourceManagerImpl                          ~ cloud-server
         - A resource from plugin
          - XXXCmd
           - ApiDispatcher
            - AsyncJobManagerImpl                      ~ cloud-server
       
  
  - Adapter ~ Pluggable Code within Cloud Stack
  ---------------------------------------------------
  - A ComponentLifeCycle interface  ~ configure/start/stop/run-level
  - ComponentLifeCycleBase implements ComponentLifeCycle
  
  - An Adapter interface extends ComponentLifeCycle  interface  
  - A concrete AdapterBase extends ComponentLifeCycleBase implements Adapter
  
  - An adapter LifeCycle Interface extends Adapter  
  - An abstract adapter LifeCycle extends AdapterBase implements LifeCycle interface  
  - A concrete adapter LifeCycle Impl extends abstract adapter lifecycle in plugin project
  
  
  - PluggableService ~ Method for Pluggable Code within CS
  ---------------------------------------------------------------
  - A ComponentLifeCycle interface  ~ configure/start/stop/run-level
  - PluggableService interface ~ expose pluggable methods
  - An Adapter interface extends ComponentLifeCycle  interface  
  - A ResourceStateAdapter interface extends Adapter interface ~ used for Agent Ops
  
  - A Plugin Interface extends PluggableService ... 
  - A concrete plugin impl extends AbstractBase, implements ResourceStateAdapter, someotherLifecycleInterface, PluginInterface
  
  
  
  
  Questions ?
  - --------------
  1/  DefaultPrimaryDataStoreProviderManagerImpl & DataStoreProviderManagerImpl have a cyclic dependency!
  
      Why does DataStoreProviderManagerImpl compose DefaultPrimaryDataStoreProviderManagerImpl ?
      
      DefaultPrimaryDataStoreProviderManagerImpl composes the DataStoreProviderManagerImpl, which seems fine.
      The registerDriver & registerHostListener can be done in DefaultPrimaryDataStoreProviderManagerImpl class itself in its 
      @PostConstruct method . Ofcourse, this will be effective only when getDataStoreProviders() of
      DataStoreProviderManagerImpl returns the providers instead of null.
      
      An alternative approach might be to have DefaultPrimaryDataStoreProviderManagerImpl extend
      DataStoreProviderManagerImpl instead of composing the latter. This way the configure method can be overridden to register
      drivers & host listeners.
      
  
