Developers guide to SAML Workings 0-0-0-

 TO READ
-------------
  > http://www.willydev.net/descargas/PartnerAndPractices/WillyDev_ImplementingMessageLayerSecuritywithaSTSinWSE3.0.pdf
  > http://docs.oasis-open.org/imi/identity/v1.0/identity.html
  > https://www.oasis-open.org/committees/download.php/16768/wss-v1.1-spec-os-SAMLTokenProfile.pdf
  > http://docs.oasis-open.org/ws-sx/security-policy/examples/ws-sp-usecases-examples.html
  > http://coheigea.blogspot.in/2012/04/batch-processing-in-apache-cxf-sts.html
  > http://msdn.microsoft.com/en-us/magazine/ff872350.aspx
  > coheigea.blogspot.in/2012/02/ws-trust-spnego-support-in-apache-cxf.html
  > http://www.cloudidentity.com/blog/2010/05/26/your-fedauth-cookies-on-a-diet-issessionmode-true/
  > https://developers.google.com/+/web/signin/server-side-flow
  > https://developers.google.com/+/web/signin/#using_the_client-side_flow
  > http://nat.sakimura.org/2011/05/15/dummys-guide-for-the-difference-between-oauth-authentication-and-openid/
  > CookieBroker Architecture



 Real Good Security Site
-----------------------------
  > owulff.blogspot.in
  > coheigea.blogspot.in

  - Hashed Signature in URL -
 --------------------------------------
 - May be a hashed signature of URL
 - generated via Secret Key & HMAC SHA-1 hashing algo
 
 - Hashing & URL Query Param -
 -------------------------------
 - URL encode
 - Generate the hash using HMAC SHA-1 hash algo with the Secret Key
 - Base64 encode the resulting ByteArray in UTF-8
 - attach this hash to the query param
 
 


 Private Key -> Discovery -- DOSETA Specs
------------------------------------------
  > The private key used to sign is discovered in the KeyRepository via an alias of
  > --> (selector + ".")? + "_domainKey." + domain 

 RestEasy -- Security
-----------------------
  > Uses Java annotations for Signing, Verification, Expiry, etc

 Certificate from Byte or InputStream
---------------------------------
  > You need to extract the PrivateKey, X509Certificate, PublicKey from byte etc
  > Need to use PKCS8EncodedKeySpec, X509EncodedKeySpec, CertificateFactory
  > Need to load BouncyCastleProvider
  > check RestEasy -> Security module

 Certificate from Byte/Stream via Der/Pem
-------------------------------------------
  > The byte info can be in Pem or in Der format
  > So have a utility to convert from pem to der
  > then Have methods to use der type stream/byte to generate PrivateKey, X509, PublicKey etc ..
  > check RestEasy -> Security Module
  > Pem --> is utf-8 encoded





 
 

 SASL Mechanism
--------------------
  > chosen @ creation time of SASL client
  > or set later after a list of server-supported mechanisms have been discovered
  > some mechanisms:
  > --> DIGEST-MD5, GSSAPI

 SASL Communication
----------------------
  > no direct communication bewtween client & server
  > --> coz communication protocol differs from service to service
  > relies on challenges from the server to be passed in & processed
 
 SASL QoS
-------------
  > Quality Of Service
  > Once the initial negotiation is complete
  > --> communication between client & server may need to be processed
  > --> QoS may call for signatures or encryption

 SASL Authorization
----------------------
  > Supported if mechanism & protocol supports it

 SASL QoP
-------------
  > Quality of Protection
  > --> no protection; integrity protection; confidentiality protection

 Mututal Auth --> Mechanisms
-----------------------------
  > DIGEST-MD5 & GSSAPI support mutual authentication
 
 SASL + Plain Mechanism 
----------------------------------------
def process(self, challenge=None):

        return b'\x00' + bytes(self.username) + b'\x00' + bytes(self.password)

 SASL + CramMD5 Mechanism 
-------------------------------------------
def process(self, challenge=None):

        if challenge is None:
            return None
        
        mac = hmac.HMAC(key=bytes(self.password), digestmod=hashlib.md5)
        mac.update(challenge)
        return bytes(self.username) + b' ' + bytes(mac.hexdigest())


 SASL + DigestMD5 Mechanism
------------------------------
def _MAC(self, seq, msg, key):

        mac = hmac.HMAC(key=key, digestmod=hashlib.md5)
        seqnum = num_to_bytes(seq)
        mac.update(seqnum); mac.update(msg)
        return mac.digest()[:10] + b'\x00\x01' + seqnum

 SASL + Digest MD5 --> Buffer <--
-----------------------------------
  > Need to take care of buffer while
  > --> HASHING the msg
  > --> wrapping & un-wrapping the HASHED msg
  > coz there is a max buffer limit specified by the Server


 Py + HMAC --> Key Hashing for Message Authentication
-----------------------------------------------------
  > HMAC object == hmac
  > hmac.update(msg) --> updates the hmac with the string msg
  > hmac.update(msg1); hmac.update(msg2) == hmac.update(msg1 + msg2);
  > hmac.digest --> returns the digest of the strings passed to hmac so far
  > digest --> may return non-ASCII characters including NUL bytes
  > hexdigest --> returns a string twice the length containing only hex digits
  > hexdigit --> used to exchange the value safely in email or other non-binary environs

 Py --> hashlib --> pure Hashing
------------------------------------
  > interface to implementations of various secure hash & msg digest algos
  > older Algos were called - DIGEST
  > Modern term is - SECURE HASH
  > additional Algos may be available depending on OpenSSL lib that Py uses on yout platform
  > similar to HMAC functions but without any KEY


 -0 SASL
----------------
  > Security Assertion Markup Language
  > usedfor Web SSO
  > an app frameowrk to generalize authentication
  > SASL is used by app protocols like IMAP, POP & XMPP
  > effect is to modularize authentication, s.t. newer authentication mechanisms can be added as needed

 Federation Scenarios
-------------------------
  > SOAP Based --> Active
  > --> usecase - Windows clients & WCF services
  > Browser based --> Passive
  > --> In WIF, its plain RST & RSTR
  
 Browser based Federation
-----------------------------
  > rely on HTTP GET, POST, Browser Redirects, COOKIES




0-0-0 SAML Specs 0-0-0
+ Assertions - tokens to tranfer user identity info in the messages
+ Protocols  - Types of Request & Response messages
+ Bindings   - COmmunication method to transport the messages
+ not relevant to Web Services communication


0-0-0 Protocols 0-0-0
+ Authentication Request
+ Single Logout
+ Artifact Resolution
+ Name Identifier Management


0-0-0 Binding 0-0-0
+ how SAML messages are transmitted from one system entity to another
+ can be HTTP
> HTTP Redirect
> HTTP POST
> HTTP artifact
+ can be SOAP
+ 

0-0-0 Profiles 0-0-0
+ define the UseCases for for Web SSO
+ Combination of protocols, assertions & bindings that are used to create a federation
+ Browser Artifact - SOAP based - known as SOAP Back Channel
+ Browser POST
+ Web Browser SSO
+ Single Logout
+ Name Identifier Management
+ Identity Provider Discovery
 

-0- STS & SAML Assertion
-------------------------
  > SAMLAssertion's Subject's confirmation methods can be correlated with STS
  > subject confirmation methods are not defined in SAML core
  > SAML Profile specs define the below 3 subject confirmation methods
  > > Holder Of Key (HOK)
  > > Bearer
  > > Send Vouches (SV)

-0- SAML & Web Services
--------------------------
  > standardized in the context of SAML token profile
  > https://www.oasis-open.org/committees/download.php/16768/wss-v1.1-spec-os-SAMLTokenProfile.pdf
  
-0- WS Security Policy UseCases
----------------------------------
  > http://docs.oasis-open.org/ws-sx/security-policy/examples/ws-sp-usecases-examples.html

-0- WS-Trust STS
---------------------
  > introduces a runtime component called STS
  > STS will act as an intermediary between SP & IDP
  > this has advantages to the direct trust relationship between SP & IDP
  > STS can issue tokens based on requirements from IDP &/or SP
  > > requirements of IDP are specified in a WS-Policy or out of band agreement

-0- STS & Web Service Consumer
--------------------------
  > consumer need not know various types of token required by IDP
  > web service consumer sends request to STS providing the requirements of the client as well as IDP
  > once consumer receives token from STS, it attaches the same to outgoing SOAP message meant for IDP

-0- STS jargon - TokenType
---------------------
  > type of security token requested
  > security token can be SAML 1.1, 2.0, X.509, etc
  > URIs are defined for all standard security tokens

-0- STS jargon - KeyType
---------------------------
  > Public, Symmetric, Bearer
  > each has a URI defined
  > PK & SK are good even if SAML token is in possession of wrong hands
  > Bearer is not good for above case i.e. man-in-the-middle
  > Combine Bearer with HTTPS

-0- STS jargon - Claims
-----------------------------
  > specifies required & optional claims
  > claim can be
  > > email address, role, information, country, etc

-0- STS jargon - Applies To
------------------------------
  > specifies the scope for which the token is required
  > can be the URL of the SP - Service Provider

-0- STS jargon - Lifetime
------------------------------
  > specifies the creation & expiration of token

-0- STS jargon - Claims
------------------------
  > maps to a SAML attribute statement

-0- STS & IDP - Trust
---------------------------
  > via certificate
 
-0- STS & KeyType <=> ConfirmationMethod
-----------------------------------------
  > PK or SK <=> HOK
  > Bearer <=> Bearer

-0- STS & ConfirmationMethod
---------------------------------
  > Bearer & HOK widely used in all STS usecases
  > Bearer & HOK widely used in WS FED Passive Requestor Profile
  > Bearer & HOK widely used in SAML Post Profile

-0- STS & WS-Trust
--------------------
  > STS refers to a WS-Trust endpoint

-0- Identity Provider Security Token Service
--------------------------------------------
  > IP/STS - STS run by an IDP to issue tokens

-0- RP/STS
--------------
  > STS run by an RP to accept & issue tokens


-0- Brokered Authentication & STS - An UseCase
------------------------------------
  > brokered auth using STS
  > allow Web Services to authenticate clients in a heterogenous environment
  > broker issues signed security tokens for authentication
  > allows additional cotrols such as authorization & auditing
  > custom STS using Web Services Enhancements (WSE) 3.0
  > use STS to negotiate a session key between client app & a service
  > session key can be used as a basis for XML signature & encryption between client & service
  > WSE 3.0 - custom policy assertion - to encrypt & sign messages
  > encrypt & sign messages using symmetric key contained in SAML token
  > WSE 3.0 - custom security token manager - validate token
  > WSE 3.0 - Security Bindings - to secure client to STS communication
  > Participants
  > > client - provides user credentials
  > > client - obtains SAML token from STS
  > > STS - authenticates client from latter's credentials
  > > STS - issues Security Token to client
  > > Service - requires a security token prior to authorizing the client
  > Flow
  > > client ------ RST -----> STS
  > > STS  ----- RSTR -----> client
  > > client  ----- Request -----> Service
  > > Service ----- Response -----> client
  > Operation Modes
  > > Implicit Mode - SamlPolicyAssertion - handles communication between client & STS
  > > Explicit Mode - client has to do above manually - normally client need not deal with Token
  > Caching
  > > STS determines whether or not SAML token can be cached
  > > if caching possible, client will cache in its SOAP Session Context
  > Username Token
  > > with SendPlainText password
  > > communication to be secured either @ transport layer (SSL) or @ message layer using WSE 3.0
  > Message Layer Security
  > > derived key token in the RST 
  > > key is encrypted with a wrapped symmetric encryption key
  > > wrapped symmetric encryption key is encrypted with the target Service's X.509 cert public key
  > STS decrypts encrypted parts of RST
  > 
  > STS generates Symmetric Key
  > > a high entropy symmetric key is generated
  > > used as a proof of possesion to confirm the subject's identity
  > > used by client & service to sign & encrypt messages
  > > symmetric key = hash computation of(STS generated entropy value && entropy value provided by client in RST)
  > > encrypts the symmetric key with target service's X.509 public key
  > > this encrypted key is included as a claim in SAML token
  > > Note - STS maintains a list of target service & their public keys
  > STS signs SAML token
  > > with its own private key
  > STS sends RSTR to client
  > > Requested Service Token Response
  > > RSTR has SAML token & prrof token
  > > proof token is a copy of the encryption key added as a claim in the SAML token 
  > > proof token is not encrypted like the one present in the claim 
  > > proof token is plain text
  > > the communication is secured as discussed above ?? 
  > > client caches proof token to derive 1/encryption & 2/signing keys for securing messages exchanged with service
  > Client Sends Request to Service
  > > client initializes a request message
  > > client signs the request message
  > > client encrypts the request message
  > > client sends the request message to the service
  > Client signs the Request Message to Service
  > > signing key is derived from the proof token
  > > signing key = fn(proof token, label, nonce)
  > > derivation negates the chances of successful offline analysis by attackers
  > Client encrypts the Request Msg to Service
  > > same as signing
  > > encryption key is derived
  > > 







-0- STS - Claims encoded as SAML Attribute Statement
------------------------------------------------------
  > http://docs.oasis-open.org/imi/identity/v1.0/identity.html



















 -0 Understanding Mutual SSL Types
----------------------------------
  > mutual SSL through Proxy without a tunnel may be good
  > mutual SSL via a tunnel may not be clean











Reference:
1/ http://owulff.blogspot.in/2012/02/saml-tokens-and-ws-trust-security-token.html
2/ http://www.willydev.net/descargas/PartnerAndPractices/WillyDev_ImplementingMessageLayerSecuritywithaSTSinWSE3.0.pdf
