http://www.stroustrup.com/bs_faq2.html

 vector
 ----------
 - reading into a standard vector guarantees that u dont overflow arbitrary buffer
 - reading into a array needs u to be an expert
 - vector<double> v;
 - v.size; v[i], v.push_back(..)
 
 main()
 ---------
 - returns an int
 - return 1 //error
 - return 0 //success
 
 iostream
 -----------
 - cin & cout
 - while (cin >> d) v.push_back(d);
 - cout << "read" << v.size << "elements\n"
 
 
jvmtiEnv *env & C
 -----------------
 - In C ~ env provides the context
 - In C ~ env is the first argument
 - In C ~ jvmtiError err = (*jvmti)->GetLoadedClasses(jvmti, &class_count, &classes);
 
 jvmtiEnv *env & CPP
 ------------
 - env pointer is not required to be passed
 - jvmtiError err = jvmti->GetLoadedClasses(&class_count, &classes); 
 

C++ Object & Memory
 -----------------------
 - In a C++ program, an object in memory is typically represented by the memory address of the class's v-table 
 - A table of all the functions belonging to the object's class
 - followed by the storage for the object's data.
