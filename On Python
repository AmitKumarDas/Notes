 -0 STICKY
----------------

def  <=> function
self <=> this
All about indentations
__init__
__del__
() <=> new operator
() & del <=> create & destroy object
self <=> prefix to variable & it becomes a instance variable
self <=> as an argument in a method then it becomes an instance method
self <=> not present in argument then it becomes a static method
__ <=> double underscore for data members are private
http://pythontutor.com/visualize.html#
[] <=> list
() <=> Tuple
{} <=> dictionary
list <=> optimized for fixed length ops
Counter <=> similar to bags or multisets 
deque <=> double ended queue, 
deque <=> mimic tail filter in Unix
deque <=> track transactions, recent activity of interest
deque <=> better then list in insert & removal ops
time <=> time.strftime("%Y-%m-%dT%H:%M:%SZ",time.gmtime())
time <=> time.strftime("%Y-%m-%dT%H:%M:%SZ",time.gmtime(time.time() + 60))


-0- Http + POST SAML Assertion
---------------------------------------
values = {"TARGET" : "http://www.example.com/secure/",
        "SAMLResponse" : base64.b64encode(response.getXML())}

...

data = urllib.urlencode(values)
req = urllib2.Request("http://www.sp.demo/affwebservices/public/samlcc", data)
print urllib2.urlopen(req).read()


-0- Open Private Key & Public Cert
----------------------------------
privateKeyFile = open("../sharedfiles/InternetWidgitsCAPrivateKey.pem","r")
privatekey = privateKeyFile.read()

certificateFile = open("../sharedfiles/InternetWidgitsCertificate.pem","r")
certificate = certificateFile.read()


-0- Test Suite
------------------
  class subjectTest(unittest.TestCase):

if __name__ == '__main__':
  suite = unittest.TestLoader().loadTestsFromTestCase(subjectTests)
  unittest.TextTestRunner().run(suite)


 -0- Condition & loop & Arrays & str
------------------------------------
def set_nameidformat(self, value):
    validNameIDFormats = ["urn:oasis:names:tc:SAML:1.0:nameid-format:unspecified",
                          "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                          "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
                          "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName"]

    # Double check to see if the person entered a valid nameid-format                      
    if value not in validNameIDFormats:
      logging.warning("The nameidformat supplied is not valid. Valid formats are: " + str(validNameIDFormats))
    
    # Set the nameid format anyway for flexibility
    self._nameidformat = value


 -0- Instance Variable
-----------------------
nameidformat = property(get_nameidformat, set_nameidformat, del_nameidformat,
                          "This is the urn:oasis:names:tc:SAML:1.0:nameid-format property")


-0- UUID
---------------
  > self.assertionUUID = str(uuid.uuid4())


-0- log
----------------------
def log(loglevel, logfilename):
  logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s %(message)s',filename=logfilename,filemode='w')

 -0- XML
---------------------
subjectConfirmationElement = doc.createElement("SubjectConfirmation")
    
    # Go through the list of confirmation methods
    for confirmationMethod in self.confirmationMethods:
      confirmationMethodElement = doc.createElement("ConfirmationMethod")
      confirmationMethod = doc.createTextNode(confirmationMethod)
      confirmationMethodElement.appendChild(confirmationMethod)
      subjectConfirmationElement.appendChild(confirmationMethodElement)


 -0- Class
-------------------------
  > cool & precise & generics
  > class XXX(Object)
  > create all the related classes in one file

 -0- __init__
-----------------------
  > def __init__(self, var1=val1, var2=val2):
  >   ...
  > def __init__(self, name, nameidformat,confirmationMethods=[]):

 -0- __str__ 
-----------------------
  > def __str__(self):
  > is the toString stuff

 
  I/O Channel
-------------------------------
  >> I/O Channels = streams
  >> stdio : 0, stdout = 1, stderr = 2
  
  PIPE
-------------
  > allows stdout from 1 program to be fed as stdio of another program
  > no need for temporary file


-0 location of program
--------------------------
  > whereis echo
  >> echo: /bin/echo /usr/share/main/man/man1/echo.1.gz


 -0 o/p to a PIPE - subprocess
------------------------------
   > process = subprocess.Popen(['echo', 'Hello World!'], shell=False, stdout=subprocess.PIPE)
   > use communicate() method to read from PIPE
   > print process.communicate()
     ('Hello World!\n', None)


 -0 multi processing
------------------------
  > spawn multiple process
  > side step GIL
 
 -0 Snippet on Parent Process
-----------------------
    if hasattr(os, 'getppid'):  # only available on Unix
        print 'parent process:', os.getppid()
    print 'process id:', os.getpid()


 -0 Synchronization between processes
-------------------------------------
  def f(l, i):
    l.acquire()
    print 'hello world', i
    l.release()

if __name__ == '__main__':
    lock = Lock()

    for num in range(10):
        Process(target=f, args=(lock, num)).start()

 -0 Shared Memory that are Process & Thread Safe > 
------------------------------------------
  > Value & Array are safe
  > for more flexibility use multiprocessing.sharedctypes
  >> supports the creation of arbitrary ctypes objects allocated from shared memory




 -0 *args = varargs
-----------------------------
def print_everything(*args):
        for count, thing in enumerate(args):
           print '{0}. {1}'.format(count, thing)

  > print_everything('apple', 'banana', 'cabbage')


 -0 **kwargs = named varargs
-----------------------------
def table_things(**kwargs):
       for name, value in kwargs.items():
           print '{0} = {1}'.format(name, value)

  > table_things(apple = 'fruit', cabbage = 'vegetable')


 -0 *list
-------------------------
def print_three_things(a, b, c):
     print 'a = {0}, b = {1}, c = {2}'.format(a,b,c)


  > mylist = ['aardvark', 'baboon', 'cat']
  > print_three_things(*mylist)


 -0 *args && **kwargs - Decorator && callback
-----------------------------------
def __call__(self, *args, **kwargs):
        # Make a copy in case the callback wants to remove itself from
        # the list, since we can't iterate over a modified list.
        callbacks = self._callbacks[:]
        for callback in callbacks:
            callback(*args, **kwargs)

 -0 Functional
-------------------
def do_binary_op(op,x,y):
       return op(x,y)


 -0 Decorator
-------------------
  > defining a decorator is easy 
  > u got the annotations too

 -0 Lambda - Anonymous Functions
----------------------------------
  > declare short functions
  > is_odd = lambda x: x % 2
  > 

 -0 GIL 
-------------------
  > Global Interpreter Lock present in Python
  > imposes restrictions on Threads
  > you can not utilize multiple CPUs
  > Only one python thread can execute in the interpreter at once
  > threads hold the GIL when running
  > they release it when blocking for I/O
  > so any time a thread is forced to wait other ready threads get their chance 
  > a kind of cooperative multitasking
  

 -0 CPU bound threads Only
--------------------------
  > that never do I/O 
  > interpreter periodically performs a check
  > every 100 interpreter 'ticks'
  > check interval is independent of thread scheduling
  > release & reacquire the GIL
  > by briefly releasing the GIL other threads get a chance to run 

 -0 ticks 
-----------------
  > are not time based
  > are not interruptible

 -0 Interlude : Signals
------------------------
  > Threaded Python programs can no longer be killed with keyboard interrupt
  > i.e. Ctl + C
  > open new window & use kill -9 
  > if a signal arrives the main thread performs a check after the tick until the main thread runs
  >> often the main thread is blocked on an uninterruptible thread-join or lock
  > since, main thread is blocked, it never gets scheduled to run any kind of signal handler for it
  > interpreter tries to thread switch after every tick

 -0 Thread Scheduling
------------------------
  > Python doesnot have a thread scheduler
  > no thread priorities, preemption, round robin scheduling
  > all thread scheduling is left to HOST OS

 -0 GIL Implementation
-----------------------------
  > GIL is not a simple mutex lock
  > 






 -0 Python Threads
-----------------------
  > are real system Threads
  > POSIX threads or WINDOWS threads
  > fully managed by host OS

 -0 Thread Specific State
---------------------------
  > each thread has its own interpreter specific data structure
  > a small C structure < 100 bytes


-0 location of program - Py
--------------------------

  import os
  def whereis(program):
    for path in os.environ.get('PATH', '').split(':'):
        if os.path.exists(os.path.join(path, program)) and \
           not os.path.isdir(os.path.join(path, program)):
            return os.path.join(path, program)
    return None

  > location = whereis('echo')
  > if location is not None:
     print location
  > /bin/echo



 -0 Bridge coroutine over file/pipe
----------------------------------------
@coroutine
def sendto(f):
    try:
        while True:
            item = (yield)
            pickle.dump(item,f)
            f.flush()
    except StopIteration:
        f.close()
def recvfrom(f,target):
    try:
        while True:
            item = pickle.load(f)
            target.send(item)
    except EOFError:
        target.close()

 -0 gevent
-----------------------
import gevent
import random

def task(pid):
    """
    Some non-deterministic task
    """
    gevent.sleep(random.randint(0,2)*0.001)
    print('Task', pid, 'done')

def synchronous():
    for i in range(1,10):
        task(i)

def asynchronous():
    threads = [gevent.spawn(task, i) for i in xrange(10)]
    gevent.joinall(threads)

print('Synchronous:')
synchronous()

print('Asynchronous:')
asynchronous()

  > In fact the maximum time for the synchronous case to complete is 
  >> when each tasks pauses for 2 seconds resulting in a 20 seconds for the whole queue.
  > In the async case the maximum runtime is roughly 2 seconds 
  >> since none of the tasks block the execution of the others.

 -0 Multiprocessing Pool vs Gevent Pool
---------------------------------------
  > Non Deterministic Process Pool
  > Deterministic Gevent Pool

 -0 Runtime Modification
----------------------------
  > python's runtime can modify most of the objects @ runtime
  > modules, classes & even functions @ runtime
  > similar to proxying
  > useful for AOP concern
  > convert blocking system calls to cooperative behavior




 -0 Tuples 
--------------------
 > are immutable
 > hold multiple objects
 > tuple within a tuple doesnot lose its identity
 > access item using SQUARE bracket
 > constructed using ()


 -0 Dictionary
--------------------
 > constructed via {}
 > use SQUARE bracket


 -0 List
---------------------------
 > constructed using []
 > use SQUARE bracket


 -0 Sequences
------------------------
 > full slice or copy => [:]
 > last item          => [-1]


 -0 Reference
-----------------------------
 > only reference & not copies
 > use full slice to get a copy


 -0 Join
----------------------------------
  > seems to be a cool string util method

 -0 Native Python Library vs C Library
------------------------------------------
  > try c library first if available
  > else use python
  > try: ... except:


[]
-----------
  > use .append
  > to append object

Inheritance
----------------
  > can be modeled like GENERICS


Serialization
--------------
  > pickle or cPickle library
  > data for the instance is pickled
  > class definition is not pickled

Simulate Stream
----------------
  > use StringIO

Circuar References
-------------------
  > pickle can serialize .. No Problem




Simulate FILE
------------------
  > use StringIO

Workers
-------------
  > os.fork()
  > os.pipe()


Worker Pool Manager
------------------
  > multiprocessing library
  > 












References 
1/ http://www.dabeaz.com/coroutines/Coroutines.pdf
2/ http://www.cert.org/blogs/certcc/2012/12/forking_and_joining_python_cor.html
