

 - ref - http://groovy.dzone.com/articles/metaprogramming-groovy-i
 

 - Cool Examples -
 ----------------------
 // look ma, I'm calling a method on an integer!
 3.times { println "hello!" }

 List aList = []
 // what's that wacky operator doing to aList ?
 aList << "a string"
 assert aList[0] == "a string"

 - java.lang.Integer is FINAL -
 -------------------------------
 - However, Groovy can do above via MOP

 - Interception -
 -------------------
 - Interception to methods, properties, constructor - possible
 
 - Behavior Adaptation 
 -------------------------
 - adapt @ runtime. thru MetaClass
 
 - Hooks -
 --------------
 - to change the runtime behavior
 
 - Hooks - How ?
 ------------------
 - GroovyObject, custom MetaClass Impl, categories, ExpandoMetaClass
 
 - Behavior Adaptation of existing libraries -
 -------------------------------------------------
 - Possible via MetaClass
 
 - Behavior Adaptation of JDK libs -
 ------------------------------------
 - Possible via MetaClass
 
 - DSL for MetaClass -
 -------------------------
 - ExpandoMetaClass
 
 - Compile-Time MetaProgramming -
 -------------------------------------
 - AST Transformations since Groovy 1.6
 
 - Abstract Syntax Tree -
 -----------------------------
 - ability to change whats being compiled by Groovy Compiler
 - all this @ Compile Time
 
 - Food for Thought -
 ----------------------------
 - POGOs can be pre-compiled to POJOs & used inter-changeably.
 
 - Food for Thought -
 --------------------------
 - runtime MIXINs
  
 - Builders -
 ---------------------
 - r DSLs for handling
 - - XML, Object graph, Swing, Ant, JMX, JSON, & more
 
 - AST simplified -
 --------------------------
 - need not know the AST API indepth !!
 - Hence;
 - - ASTViewer in Groovy Console
 - - ASTBuilder
 
 - Performance -
 -----------------
 - Groovy 1.7 - no optimizations
 - Groovy 1.8 - primitive optimizations
 - Groovy 2.0 - static compilation
 
 - INDY -
 ------------
 - Groovy 2.0 - not all call paths go thru invoke dynamic calls
 - Groovy 2.1 - uses indy everywhere 
 
 - GPars -
 ----------------
 - bundled with Groovy 1.8 to tame the multi-cores
 - can use it from plain Java as well
 
 - @groovy.transform.TypeChecked -
 -----------------------------------
 - not a static compiler
 - bytecode not changed
 
 - @groovy.transform.CompileStatic -
 ----------------------------------------
 - a static compiler
 - bytecode is changed
 
 
 
 
 - AST Templates -
 --------------------
 - 
  
