
 - ref - http://groovy.dzone.com/articles/metaprogramming-groovy-i


 - Groovy's MetaClass -
 --------------------------------
 - Every object in groovy (not matter if it comes from a java class or a groovy class) has a MetaClass, 
 - responsible for holding information about the object's class. 
 
 - Groovy's Dispatch Mechanism -
 ---------------------------------
 - Everytime you invoke a method on an object, 
 - Groovy's dispatch mechanism routes the call through the MetaClass related to the object, 
 - so if you can alter the MetaClass in any way you may change the object's behavior at runtime

 - SomeClass.metaClass.curriedMethod -
 -------------------------------------------
 - adds dynamic behavior to existing class
 - similar to extending the original class
 - but can you do so to the original class if its final 
 - groovy can do this to final classes too
 - no need of util class
 
 
 - How MetaProgramming -
 ---------------------------
 - ExpandoMetaClass & define Closure in it
 
 
 - Closures -
 ----------------
 - Method without a surrounding class
 
 - EMC -
 -----------
 - ExpandoMetaClass (EMC). 
 - Every class — both Java and Groovy — is surrounded by an EMC that intercepts method calls to it. 
 - This means that even though the String is final, methods can be added to its EMC.
 
 - EMC. What ?
 ------------------
 - done by a Groovy concept called delegates
 
 - Is above required ? -
 -------------------------
 - Think of overriding with Mock Impls ~ Testing
 
 
 - What Else ?
 ----------------
 - Apart from EMC there is 'categories'
 
 
 - Category -
 -------------
 - A separate class . More reusability
 - save the new behavior in a separate class
 
 
 - EMC vs Categories -
 ---------------------------
 - EMC requires Closures & hence Groovy
 - Categories requries plain classes with static methods & any Java util class can be a Category
 
 - Category -
 ------------------
 
 
 - Great Example -
 ---------------------
 ref - http://www.ibm.com/developerworks/java/library/j-pg06239/index.html
 
 String.metaClass.weather={->
  if(!delegate.isInteger()){
    return "The weather() method only works with zip codes like '90201'"
  }
  def addr = "http://weather.yahooapis.com/forecastrss?p=${delegate}"
  def rss = new XmlSlurper().parse(addr)
  def results = rss.channel.item.title
  results << "\n" + rss.channel.item.condition.@text
  results << "\nTemp: " + rss.channel.item.condition.@temp
 }

 println "80020".weather()


 //output
 Conditions for Broomfield, CO at 1:57 pm MDT
 Mostly Cloudy
 Temp: 72
 
 
 
 
 
 
 
 
 
