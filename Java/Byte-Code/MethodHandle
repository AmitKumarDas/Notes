 - MethodHandle -
 ---------------------
 - a successful lookup - a object pointing to field/method/constructor impl
 
 - MethodHandles -
 --------------------
 - type-safe function pointers that can be combined at runtime into larger units of fucntionality
 
 - Method Handle -
 ---------------------
 - Given any method M, JVM provides a way to produce a Method Handle MH
 - Use this MH later on as amny times as required
 
 - Method Handle ~ Provide -
 --------------------------------
 - Supply this MH to others & they too can invoke via the MH
 
 
 - Adaptation -
 ---------------
 - adaptation methods are provided in MethodHandle & MethodHandles classes
 
 - Adaptation -
 -------------------
 - Given a method handle and some arguments for it, 
 - the JVM will give me a partial invocation of that method handle, 
 - which is the 'new' Method Handle that remembers those arguments, 
 - and, when invoked on the remaining arguments, 
 - will invoke the original method handle with the grand total set of arguments. 
  
 - Adaption ~ Partial Invocation -
 -----------------------------------------
 - Adaptation is also known as Partial Invocation
 
   
  MethodHandle <-> CallSite
  ---------------------------------
  > the MethodHandle matches the call site  

  MethodHandle vs Reflection Method
-------------------------------------
  > Method Handles are type-checked only at creation time
  > However, Reflection objects need to perform checking for each invocation
  
  Method Handle combinators 
 ------------------------------
  > found in java.lang.invoke.MethodHandle
  > > filterArguments
  > > filterReturnValue
  > Keeps the method handle chain almost intact, it protects JIT optimizations

 InvokeBinder
 -------------
 - MethodHandle made easy
 
 MethodHandle & Security Checks
 ----------------------------------
 - done during creation
 - they r immutable
 
 Reflection vs MethodHandles
 --------------------------
 - Security Checks done at each call . Hence, reflection is slow
 
 MethodHandle && Code Snippet
 ------------------------------
 MethodHandle honk = MethodHandles.lookup()
                                  .findVirtual(Car.class, "honk", MethodType.methodType(void.class));
 honk.invoke(new Car());
 
 
 - https://blogs.oracle.com/jrose/entry/method_handles_in_a_nutshell 
