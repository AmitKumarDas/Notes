 - http://asm.ow2.org/current/asm-transformations.pdf
 - http://asm.ow2.org/current/asm-eng.pdf
 - http://code.google.com/p/java-allocation-instrumenter/
 - http://mchr3k.github.io/org.inmemprofiler/
 - http://www.inf.usi.ch/faculty/hauswirth/publications/pldi10.pdf

 Profiling with Signals
------------------------------------
 - There is an undocumented JVMTI call in OpenJDK that allows you to get a stack trace from a running thread, 
 - - regardless of the state of that thread. 
 - In Unix-like systems, you can use a SIGPROF signal to call this function at (semi-)regular intervals, 
 - - without having to do anything to your code. 

 - Remember - A Running Thread, not any other scheduled thread etc
 - A scheduled thread i.e. a thread that has exited the blocking calls are not running

 Profiler -sans- JIT decisions
---------------------------------
 - profiling that doesnot interfere JIT decisons
 - AsyncGetCallTrace does exactly this
 - - you dont call it from your code
 - - it doesnot wait for a safepoint
 - - it doesnot change your code
 - - JIT doesnot care


 SIGPROF 
-----------
 - is a POSIX signal. 
 - The way it is set up under Linux is that you can set a timer that goes off at intervals, 
 - and, whenever the timer expires, the SIGPROF signal is sent to the application. 
 - The idea is that you can then collect profiling information at fixed intervals.
 - The signal is caught and handled by a random running thread. 
 - That thread will be doing some task related to running the Java application 
 -- whether that is executing user code, running garbage collection, or doing internal VM maintenance.

 Issues with SIGPROF
------------------------
 - The problem is that there is no officially documented JVMTI hook that allows the user to find out exactly
 - what the currently running thread is doing that is safe to run in a signal handler. 
 - The official way of getting a stack trace for the currently executing thread, 
 - the GetStackTrace function, isn't safe to be called in an asynchronous way 
 -- if you try to read the stack when a timer expires, 
 - the Java stack could be in a corrupt state, or GC could be running, or any number of other things.


 Unix & Signals
------------------
 - There are 32 signals. 
 - If you want to see the full list in a glibc system, see the header file /usr/include/bits/signum.h. 
 - They each map to a number; SIGKILL, for example, is number 9. 
 - You can use the command line program "kill" to send a signal to any process. 
 - If you send a SIGKILL to a program using "kill -9 ",
 - it will take the default action of terminating that process, unless it has registered a signal handler.

 - SIGPROF - used for profiling

 Signal Handling
-------------------
 - Signal is handled in process
 - So which thread actually handles it
 - In Linux 2.4 and earlier, each thread was a separate process. 
 - Because of this, you need to set up a separate timer for every thread that you want to be profiled. 
 - In other words, it is more-or-less completely unusable unless you have a very tightly controlled environment.
 - In Linux 2.6, a randomly chosen, currently executing thread is picked to execute the signal handler. 
 - This is what we want...


 Signal Handling & Lock
---------------------------
 - In C code, you can't really grab an arbitrary lock in a signal handler, 
 - because the thread executing might already have that lock; 
 - because most C lock implementation aren't reentrant, this can cause serious problems.

 Signal Handing -> Disabled
-----------------------------
 - pthread_sigmask()
 - sigprocmask()


 Identifying Hot Methods
-----------------------------
 - If wrongly identified, a programmer will analyze a cold method for optimizing
 - 

 Various Ways 2 get Stack Trace
----------------------------------
 - Thread.dumpStack()
 - new Throwable().getStackTrace()
 - ThreadMXBean.getThreadInfo
 - JVMTI's GetStackTrace or GetAllStackTraces
 - If you send a system-dependent signal to your JVM process, it
 - - will spit out a stack dump of every currently live thread. 
 - - On Solaris and Linux, the signal is a SIGQUIT, which you can get by using kill -3 on the JVM PID
 - - (or the PID of the parent JVM process under Linux 2.4), or hitting Control-\. 
 - - On Windows, you can achieve the same effect by hitting Ctrl-Break on Windows.

 - However, above wont tell you about the currentl running thread
 - Above tells about the Runnable thread


























References:
--------------
1/ http://jeremymanson.blogspot.in/search?updated-min=2010-01-01T00:00:00-08:00&updated-max=2011-01-01T00:00:00-08:00&max-results=5
