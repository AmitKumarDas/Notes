http://docs.oracle.com/javase/6/docs/platform/jvmti/jvmti.html


 Multiple
 ----------
 - simultaneous agents can coexist
 - each agent has its own environment
 - JVMTI state differs from each agent
 
 Separate Agents Use 1 Shared VM State
 ---------------------------------------
 - 1 shared state of VM
 - used by separate Agents
 - Agents can disturb reults of other Agents
 
 Static Instrumentation
 --------------------------
 - maintain 2 different .class versions
 
 Load-Time Instrumentation
 ------------------------------
 - ClassFileLoadHook event
 
 Dynamic Instrumentation
 ----------------------------
 - ClassLoadFileHook event
 - ReTransform Classes function
 - Classes can be modified multiple times
 - Classes can be returned to their original state
 
 
 Environment Pointer - jvmtiEnv*
 ----------------------
 - JVMTI functions is used via Interface Pointer
 - JVMTI interface pointer is called Environment Pointer
 
 Obtain jvmtiEnv
 --------------------
 - from JNI Invocation API GetEnv
 
 jvmtiEnv *jvmti;
 ...
 (*jvm)->GetEnv(jvm, &jvmti, JVMTI_VERSION_1_0);
 
 - Each call to GetEnv creates a new JVMTI connection
 - Each call to GetEnv returns a new JVMTI environment
 
 
 jvmtiEnv *env & C
 -----------------
 - In C ~ env provides the context
 - In C ~ env is the first argument
 - In C ~ jvmtiError err = (*jvmti)->GetLoadedClasses(jvmti, &class_count, &classes);
 
 In CPP
 ------------
 - env pointer is not required to be passed
 - jvmtiError err = jvmti->GetLoadedClasses(&class_count, &classes);
 
 
 jvmti & memory
 ----------------
 - Our client code must recognize the functions that allocate memory
 - i.e. JVMTI func allocate memory
 - client code has to deallocate that
 
 
 jvmti fun & error
 -------------------
 - an error occured if NOT JVMTI_ERROR_NONE
 - JVMTI func never throw exception
 - errors are communcated via function return value
 
 
 Allocate
 ----------
 - allocates memory thru JVMTI allocator
 - this func may be called from the callbacks to Heap iterations, 
 - this func may be called from event handlers for 
 -- GarbageCollectionStart, GarbageCollectionFinish, & ObjectFree events
 
 
 
 
 
 
 
 
 
 
 
