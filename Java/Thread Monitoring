 Instrumenting Thread Pooling
 -------------------------------
 - use aspects
 - use ASM
 - etc
 
 Instrument Thread Pool
 ---------------------------
 - Custom Excutor that extends ThreadPoolExecutor
 - Then expose the data using MXBean
 
 What 2 Instrument
 ------------------
 - track interval between requests
 - total service time
 - total pool time
 - no of requests
 
 Average vs Running
 --------------------
 - If you have a tool for runtime analysis then provide running data
 - If you want to display via text go for average
 
 
 # However, it seems that runtime info (timestamp, data) over graphical tools is a good idea than
 # putting down logic for mean median average etc !!!
 
 
 Code try Out
 ----------
 - java.util.concurrent.RejectedExecutionHandler
 
 Various Ways 2 get Stack Trace
----------------------------------
 - Thread.dumpStack()
 - new Throwable().getStackTrace()
 - ThreadMXBean.getThreadInfo
 - JVMTI's GetStackTrace or GetAllStackTraces
 - If you send a system-dependent signal to your JVM process, it
 - - will spit out a stack dump of every currently live thread. 
 - - On Solaris and Linux, the signal is a SIGQUIT, which you can get by using kill -3 on the JVM PID
 - - (or the PID of the parent JVM process under Linux 2.4), or hitting Control-\. 
 - - On Windows, you can achieve the same effect by hitting Ctrl-Break on Windows.

 - However, above wont tell you about the currentl running thread
 - Above tells about the Runnable thread
 
 
 
 
 
 
 
 
 
